"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getCodeFrameForLocation = exports.getLocationByPathURI = exports.getLocationByPath = void 0;

var _yamlAstParser = require("yaml-ast-parser");

var _utils = require("../utils");

const parseAST = ctx => {
  if (ctx.AST) return ctx.AST;
  ctx.AST = (0, _yamlAstParser.safeLoad)(ctx.source);
  return ctx.AST;
};

const getMappingChild = (mapping, childName) => {
  const mappings = mapping.value ? mapping.value.mappings : mapping.mappings;
  const target = mappings.filter(child => child.key.value === childName);
  return target ? target[0] : null;
};

const getSequenceElement = (seq, id) => seq.value ? seq.value.items[id] : seq.items[id];

const getNodeByPath = (tree, path, target = 'value') => {
  if (path.length === 0) return target === 'value' ? tree : tree.key;
  const nextKey = path.pop();
  let next;

  if (tree.value && tree.value.mappings || tree.mappings) {
    next = getMappingChild(tree, nextKey);
  } else if (tree.value && tree.value.items || tree.items) {
    next = getSequenceElement(tree, nextKey);
  }

  return getNodeByPath(next, path, target);
};

const getLocationByPath = (path, ctx, target) => {
  const AST = parseAST(ctx);
  const node = getNodeByPath(AST, path.reverse(), target);
  if (!node) return null; // console.log(node);

  const positionStart = (0, _utils.getLineNumberFromId)(ctx.source, node.startPosition);
  const endPosition = (0, _utils.getLineNumberFromId)(ctx.source, node.endPosition);
  return {
    startLine: positionStart.lineNum,
    startCol: positionStart.posNum,
    endLine: endPosition.lineNum,
    endCol: endPosition.posNum,
    startIndex: node.startPosition,
    endIndex: node.endPosition
  };
};

exports.getLocationByPath = getLocationByPath;

const getLocationByPathURI = (path, ctx, target) => {
  const pathArray = path.replace('#/', '').split('/');
  return getLocationByPath(pathArray, ctx, target);
};

exports.getLocationByPathURI = getLocationByPathURI;

const getCodeFrameForLocation = (start, end, source, startLine = 0, linesBefore = 3, linesAfter = 2) => {
  let frameStart = start;
  let frameEnd = end;
  let actualLinesBefore = -1;
  let actualLinesAfter = -1;

  for (; actualLinesBefore !== linesBefore && frameStart >= 0; frameStart -= 1) {
    if (source[frameStart - 1] === '\n') actualLinesBefore += 1;
  }

  while (actualLinesAfter !== linesAfter && frameEnd !== source.length) {
    if (source[frameEnd] === '\n') actualLinesAfter += 1;
    frameEnd += 1;
  }

  const codeFrame = source.substring(frameStart, frameEnd + 1);
  let startOffset = start - frameStart;
  let endOffset = startOffset + end - start;
  if (frameStart === -1) startOffset -= 1;
  if (frameStart === -1) endOffset -= 1;
  const codeFrameStart = codeFrame.substring(0, startOffset);
  const codeFrameEnd = codeFrame.substring(endOffset);
  const codeFrameMain = (0, _utils.outputUnderline)((0, _utils.outputRed)(codeFrame.substring(startOffset, endOffset)));
  let codeFrameString = `${codeFrameStart}${codeFrameMain}${codeFrameEnd}`;
  const lines = codeFrameString.split('\n');
  const maxLineNum = lines.length + startLine;
  const minLineNum = startLine;
  /**
   *
   * 5
   * 12
   *
   */

  lines.forEach((_, id) => {
    // TODO: add rightpadding
    const lineNum = String(`0${startLine - actualLinesBefore + id - 1}`).slice(-maxLineNum.toString().length);
    lines[id] = (0, _utils.outputGrey)(`${lineNum}| ${lines[id]}`);
  });
  codeFrameString = lines.join('\n');
  return codeFrameString;
};

exports.getCodeFrameForLocation = getCodeFrameForLocation;
var _default = getLocationByPath;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy95YW1sL2luZGV4LmpzIl0sIm5hbWVzIjpbInBhcnNlQVNUIiwiY3R4IiwiQVNUIiwic291cmNlIiwiZ2V0TWFwcGluZ0NoaWxkIiwibWFwcGluZyIsImNoaWxkTmFtZSIsIm1hcHBpbmdzIiwidmFsdWUiLCJ0YXJnZXQiLCJmaWx0ZXIiLCJjaGlsZCIsImtleSIsImdldFNlcXVlbmNlRWxlbWVudCIsInNlcSIsImlkIiwiaXRlbXMiLCJnZXROb2RlQnlQYXRoIiwidHJlZSIsInBhdGgiLCJsZW5ndGgiLCJuZXh0S2V5IiwicG9wIiwibmV4dCIsImdldExvY2F0aW9uQnlQYXRoIiwibm9kZSIsInJldmVyc2UiLCJwb3NpdGlvblN0YXJ0Iiwic3RhcnRQb3NpdGlvbiIsImVuZFBvc2l0aW9uIiwic3RhcnRMaW5lIiwibGluZU51bSIsInN0YXJ0Q29sIiwicG9zTnVtIiwiZW5kTGluZSIsImVuZENvbCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImdldExvY2F0aW9uQnlQYXRoVVJJIiwicGF0aEFycmF5IiwicmVwbGFjZSIsInNwbGl0IiwiZ2V0Q29kZUZyYW1lRm9yTG9jYXRpb24iLCJzdGFydCIsImVuZCIsImxpbmVzQmVmb3JlIiwibGluZXNBZnRlciIsImZyYW1lU3RhcnQiLCJmcmFtZUVuZCIsImFjdHVhbExpbmVzQmVmb3JlIiwiYWN0dWFsTGluZXNBZnRlciIsImNvZGVGcmFtZSIsInN1YnN0cmluZyIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiY29kZUZyYW1lU3RhcnQiLCJjb2RlRnJhbWVFbmQiLCJjb2RlRnJhbWVNYWluIiwiY29kZUZyYW1lU3RyaW5nIiwibGluZXMiLCJtYXhMaW5lTnVtIiwibWluTGluZU51bSIsImZvckVhY2giLCJfIiwiU3RyaW5nIiwic2xpY2UiLCJ0b1N0cmluZyIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFJQSxNQUFNQSxRQUFRLEdBQUlDLEdBQUQsSUFBUztB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RUFBaEMsR0FBcUMsQ0FBRSxFQUE1QyxDQUFOLENBQXFEa0QsS0FBckQsQ0FBMkQsQ0FBQ0wsVUFBVSxDQUFDTSxRQUFYLEdBQXNCOUMsTUFBbEYsQ0FBaEI7QUFDQXVDLElBQUFBLEtBQUssQ0FBQzVDLEVBQUQsQ0FBTCxHQUFZLHVCQUFZLEdBQUVnQixPQUFRLEtBQUk0QixLQUFLLENBQUM1QyxFQUFELENBQUssRUFBcEMsQ0FBWjtBQUNELEdBSkQ7QUFNQTJDLEVBQUFBLGVBQWUsR0FBR0MsS0FBSyxDQUFDUSxJQUFOLENBQVcsSUFBWCxDQUFsQjtBQUVBLFNBQU9ULGVBQVA7QUFDRCxDQWxETTs7O2VBb0RRbEMsaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzYWZlTG9hZCB9IGZyb20gJ3lhbWwtYXN0LXBhcnNlcic7XG5cbmltcG9ydCB7XG4gIG91dHB1dFJlZCwgb3V0cHV0VW5kZXJsaW5lLCBnZXRMaW5lTnVtYmVyRnJvbUlkLCBvdXRwdXRHcmV5LFxufSBmcm9tICcuLi91dGlscyc7XG5cbmNvbnN0IHBhcnNlQVNUID0gKGN0eCkgPT4ge1xuICBpZiAoY3R4LkFTVCkgcmV0dXJuIGN0eC5BU1Q7XG4gIGN0eC5BU1QgPSBzYWZlTG9hZChjdHguc291cmNlKTtcbiAgcmV0dXJuIGN0eC5BU1Q7XG59O1xuXG5jb25zdCBnZXRNYXBwaW5nQ2hpbGQgPSAobWFwcGluZywgY2hpbGROYW1lKSA9PiB7XG4gIGNvbnN0IG1hcHBpbmdzID0gbWFwcGluZy52YWx1ZSA/IG1hcHBpbmcudmFsdWUubWFwcGluZ3MgOiBtYXBwaW5nLm1hcHBpbmdzO1xuICBjb25zdCB0YXJnZXQgPSBtYXBwaW5nc1xuICAgIC5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZC5rZXkudmFsdWUgPT09IGNoaWxkTmFtZSk7XG4gIHJldHVybiB0YXJnZXQgPyB0YXJnZXRbMF0gOiBudWxsO1xufTtcblxuY29uc3QgZ2V0U2VxdWVuY2VFbGVtZW50ID0gKHNlcSwgaWQpID0+IChzZXEudmFsdWUgPyBzZXEudmFsdWUuaXRlbXNbaWRdIDogc2VxLml0ZW1zW2lkXSk7XG5cbmNvbnN0IGdldE5vZGVCeVBhdGggPSAodHJlZSwgcGF0aCwgdGFyZ2V0ID0gJ3ZhbHVlJykgPT4ge1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiB0YXJnZXQgPT09ICd2YWx1ZScgPyB0cmVlIDogdHJlZS5rZXk7XG4gIGNvbnN0IG5leHRLZXkgPSBwYXRoLnBvcCgpO1xuICBsZXQgbmV4dDtcbiAgaWYgKCh0cmVlLnZhbHVlICYmIHRyZWUudmFsdWUubWFwcGluZ3MpIHx8IHRyZWUubWFwcGluZ3MpIHtcbiAgICBuZXh0ID0gZ2V0TWFwcGluZ0NoaWxkKHRyZWUsIG5leHRLZXkpO1xuICB9IGVsc2UgaWYgKCh0cmVlLnZhbHVlICYmIHRyZWUudmFsdWUuaXRlbXMpIHx8IHRyZWUuaXRlbXMpIHtcbiAgICBuZXh0ID0gZ2V0U2VxdWVuY2VFbGVtZW50KHRyZWUsIG5leHRLZXkpO1xuICB9XG4gIHJldHVybiBnZXROb2RlQnlQYXRoKG5leHQsIHBhdGgsIHRhcmdldCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TG9jYXRpb25CeVBhdGggPSAocGF0aCwgY3R4LCB0YXJnZXQpID0+IHtcbiAgY29uc3QgQVNUID0gcGFyc2VBU1QoY3R4KTtcbiAgY29uc3Qgbm9kZSA9IGdldE5vZGVCeVBhdGgoQVNULCBwYXRoLnJldmVyc2UoKSwgdGFyZ2V0KTtcbiAgaWYgKCFub2RlKSByZXR1cm4gbnVsbDtcbiAgLy8gY29uc29sZS5sb2cobm9kZSk7XG4gIGNvbnN0IHBvc2l0aW9uU3RhcnQgPSBnZXRMaW5lTnVtYmVyRnJvbUlkKGN0eC5zb3VyY2UsIG5vZGUuc3RhcnRQb3NpdGlvbik7XG4gIGNvbnN0IGVuZFBvc2l0aW9uID0gZ2V0TGluZU51bWJlckZyb21JZChjdHguc291cmNlLCBub2RlLmVuZFBvc2l0aW9uKTtcbiAgcmV0dXJuIHtcbiAgICBzdGFydExpbmU6IHBvc2l0aW9uU3RhcnQubGluZU51bSxcbiAgICBzdGFydENvbDogcG9zaXRpb25TdGFydC5wb3NOdW0sXG4gICAgZW5kTGluZTogZW5kUG9zaXRpb24ubGluZU51bSxcbiAgICBlbmRDb2w6IGVuZFBvc2l0aW9uLnBvc051bSxcbiAgICBzdGFydEluZGV4OiBub2RlLnN0YXJ0UG9zaXRpb24sXG4gICAgZW5kSW5kZXg6IG5vZGUuZW5kUG9zaXRpb24sXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TG9jYXRpb25CeVBhdGhVUkkgPSAocGF0aCwgY3R4LCB0YXJnZXQpID0+IHtcbiAgY29uc3QgcGF0aEFycmF5ID0gcGF0aC5yZXBsYWNlKCcjLycsICcnKS5zcGxpdCgnLycpO1xuICByZXR1cm4gZ2V0TG9jYXRpb25CeVBhdGgocGF0aEFycmF5LCBjdHgsIHRhcmdldCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29kZUZyYW1lRm9yTG9jYXRpb24gPSAoXG4gIHN0YXJ0LCBlbmQsIHNvdXJjZSwgc3RhcnRMaW5lID0gMCwgbGluZXNCZWZvcmUgPSAzLCBsaW5lc0FmdGVyID0gMixcbikgPT4ge1xuICBsZXQgZnJhbWVTdGFydCA9IHN0YXJ0O1xuICBsZXQgZnJhbWVFbmQgPSBlbmQ7XG4gIGxldCBhY3R1YWxMaW5lc0JlZm9yZSA9IC0xO1xuICBsZXQgYWN0dWFsTGluZXNBZnRlciA9IC0xO1xuXG4gIGZvciAoOyBhY3R1YWxMaW5lc0JlZm9yZSAhPT0gbGluZXNCZWZvcmUgJiYgZnJhbWVTdGFydCA+PSAwOyBmcmFtZVN0YXJ0IC09IDEpIHtcbiAgICBpZiAoc291cmNlW2ZyYW1lU3RhcnQgLSAxXSA9PT0gJ1xcbicpIGFjdHVhbExpbmVzQmVmb3JlICs9IDE7XG4gIH1cblxuICB3aGlsZSAoYWN0dWFsTGluZXNBZnRlciAhPT0gbGluZXNBZnRlciAmJiBmcmFtZUVuZCAhPT0gc291cmNlLmxlbmd0aCkge1xuICAgIGlmIChzb3VyY2VbZnJhbWVFbmRdID09PSAnXFxuJykgYWN0dWFsTGluZXNBZnRlciArPSAxO1xuICAgIGZyYW1lRW5kICs9IDE7XG4gIH1cblxuICBjb25zdCBjb2RlRnJhbWUgPSBzb3VyY2Uuc3Vic3RyaW5nKGZyYW1lU3RhcnQsIGZyYW1lRW5kICsgMSk7XG4gIGxldCBzdGFydE9mZnNldCA9IHN0YXJ0IC0gZnJhbWVTdGFydDtcbiAgbGV0IGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgZW5kIC0gc3RhcnQ7XG5cbiAgaWYgKGZyYW1lU3RhcnQgPT09IC0xKSBzdGFydE9mZnNldCAtPSAxO1xuICBpZiAoZnJhbWVTdGFydCA9PT0gLTEpIGVuZE9mZnNldCAtPSAxO1xuXG4gIGNvbnN0IGNvZGVGcmFtZVN0YXJ0ID0gY29kZUZyYW1lLnN1YnN0cmluZygwLCBzdGFydE9mZnNldCk7XG4gIGNvbnN0IGNvZGVGcmFtZUVuZCA9IGNvZGVGcmFtZS5zdWJzdHJpbmcoZW5kT2Zmc2V0KTtcbiAgY29uc3QgY29kZUZyYW1lTWFpbiA9IG91dHB1dFVuZGVybGluZShvdXRwdXRSZWQoY29kZUZyYW1lLnN1YnN0cmluZyhzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSkpO1xuICBsZXQgY29kZUZyYW1lU3RyaW5nID0gYCR7Y29kZUZyYW1lU3RhcnR9JHtjb2RlRnJhbWVNYWlufSR7Y29kZUZyYW1lRW5kfWA7XG5cbiAgY29uc3QgbGluZXMgPSBjb2RlRnJhbWVTdHJpbmcuc3BsaXQoJ1xcbicpO1xuXG4gIGNvbnN0IG1heExpbmVOdW0gPSBsaW5lcy5sZW5ndGggKyBzdGFydExpbmU7XG4gIGNvbnN0IG1pbkxpbmVOdW0gPSBzdGFydExpbmU7XG5cbiAgLyoqXG4gICAqXG4gICAqIDVcbiAgICogMTJcbiAgICpcbiAgICovXG5cbiAgbGluZXMuZm9yRWFjaCgoXywgaWQpID0+IHtcbiAgICAvLyBUT0RPOiBhZGQgcmlnaHRwYWRkaW5nXG4gICAgY29uc3QgbGluZU51bSA9IFN0cmluZyhgMCR7c3RhcnRMaW5lIC0gYWN0dWFsTGluZXNCZWZvcmUgKyBpZCAtIDF9YCkuc2xpY2UoLW1heExpbmVOdW0udG9TdHJpbmcoKS5sZW5ndGgpO1xuICAgIGxpbmVzW2lkXSA9IG91dHB1dEdyZXkoYCR7bGluZU51bX18ICR7bGluZXNbaWRdfWApO1xuICB9KTtcblxuICBjb2RlRnJhbWVTdHJpbmcgPSBsaW5lcy5qb2luKCdcXG4nKTtcblxuICByZXR1cm4gY29kZUZyYW1lU3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0TG9jYXRpb25CeVBhdGg7XG4iXX0=