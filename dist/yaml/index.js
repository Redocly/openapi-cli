"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getCodeFrameForLocation = exports.getLocationByPathURI = exports.getLocationByPath = void 0;

var _yamlAstParser = require("yaml-ast-parser");

var _utils = require("../utils");

const parseAST = ctx => {
  if (ctx.AST) return ctx.AST;
  ctx.AST = (0, _yamlAstParser.safeLoad)(ctx.source);
  return ctx.AST;
};

const getMappingChild = (mapping, childName) => {
  const mappings = mapping.value ? mapping.value.mappings : mapping.mappings;
  const target = mappings.filter(child => child.key.value === childName);
  return target ? target[0] : null;
};

const getSequenceElement = (seq, id) => seq.value ? seq.value.items[id] : seq.items[id];

const getNodeByPath = (tree, path, target = 'value') => {
  if (path.length === 0) return target === 'value' ? tree : tree.key;
  const nextKey = path.pop();
  let next;

  if (tree.value && tree.value.mappings || tree.mappings) {
    next = getMappingChild(tree, nextKey);
  } else if (tree.value && tree.value.items || tree.items) {
    next = getSequenceElement(tree, nextKey);
  }

  return getNodeByPath(next, path, target);
};

const getLocationByPath = (path, ctx, target) => {
  const AST = parseAST(ctx);
  const node = getNodeByPath(AST, path.reverse(), target);
  if (!node) return null;
  const frame = ctx.source.substring(node.startPosition, node.endPosition + 1);
  const offset = frame.length - frame.trimRight().length;
  const positionStart = (0, _utils.getLineNumberFromId)(ctx.source, node.startPosition);
  const endPosition = (0, _utils.getLineNumberFromId)(ctx.source, node.endPosition - offset);
  return {
    startLine: positionStart.lineNum,
    startCol: positionStart.posNum,
    endLine: endPosition.lineNum,
    endCol: endPosition.posNum,
    startIndex: node.startPosition,
    endIndex: node.endPosition
  };
};

exports.getLocationByPath = getLocationByPath;

const getLocationByPathURI = (path, ctx, target) => {
  const pathArray = path.replace('#/', '').split('/');
  return getLocationByPath(pathArray, ctx, target);
};

exports.getLocationByPathURI = getLocationByPathURI;

const getCodeFrameForLocation = (start, end, source, startLine = 0, linesBefore = 3, linesAfter = 3) => {
  let frameStart = start;
  let frameEnd = end;
  let actualLinesBefore = -1;
  let actualLinesAfter = 0;

  for (; actualLinesBefore !== linesBefore && frameStart >= 0; frameStart -= 1) {
    if (source[frameStart - 2] === '\n') actualLinesBefore += 1;
  }

  for (; actualLinesAfter !== linesAfter && frameEnd !== source.length; frameEnd += 1) {
    if (source[frameEnd + 2] === '\n') actualLinesAfter += 1;
  }

  const codeFrame = source.substring(frameStart, frameEnd + 1);
  let startOffset = start - frameStart;
  let endOffset = startOffset + end - start;
  if (frameStart === -1) startOffset -= 1;
  if (frameStart === -1) endOffset -= 1;
  const codeFrameStart = codeFrame.substring(0, startOffset);
  const codeFrameEnd = codeFrame.substring(endOffset);
  const codeFrameMain = (0, _utils.outputUnderline)((0, _utils.outputRed)(codeFrame.substring(startOffset, endOffset)));
  let codeFrameString = `${codeFrameStart}${codeFrameMain}${codeFrameEnd}`;
  const lines = codeFrameString.split('\n');
  const maxLineNum = lines.length + startLine;
  let minSpaces = lines.reduce((acc, val) => val.length > acc ? val.length : acc, 0);
  lines.forEach(line => {
    let spaces;

    for (spaces = 0; line[spaces] === ' ' && spaces < line.length; spaces += 1);

    if (minSpaces > spaces) minSpaces = spaces;
  });
  lines.forEach((_, id) => {
    const lineNum = String(`0${startLine - actualLinesBefore + id}`).slice(-maxLineNum.toString().length);
    const line = minSpaces >= 4 ? lines[id].slice(minSpaces) : lines[id];
    lines[id] = (0, _utils.outputGrey)(`${lineNum}| ${line}`);
  });
  codeFrameString = lines.join('\n');
  return codeFrameString;
};

exports.getCodeFrameForLocation = getCodeFrameForLocation;
var _default = getLocationByPath;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy95YW1sL2luZGV4LmpzIl0sIm5hbWVzIjpbInBhcnNlQVNUIiwiY3R4IiwiQVNUIiwic291cmNlIiwiZ2V0TWFwcGluZ0NoaWxkIiwibWFwcGluZyIsImNoaWxkTmFtZSIsIm1hcHBpbmdzIiwidmFsdWUiLCJ0YXJnZXQiLCJmaWx0ZXIiLCJjaGlsZCIsImtleSIsImdldFNlcXVlbmNlRWxlbWVudCIsInNlcSIsImlkIiwiaXRlbXMiLCJnZXROb2RlQnlQYXRoIiwidHJlZSIsInBhdGgiLCJsZW5ndGgiLCJuZXh0S2V5IiwicG9wIiwibmV4dCIsImdldExvY2F0aW9uQnlQYXRoIiwibm9kZSIsInJldmVyc2UiLCJmcmFtZSIsInN1YnN0cmluZyIsInN0YXJ0UG9zaXRpb24iLCJlbmRQb3NpdGlvbiIsIm9mZnNldCIsInRyaW1SaWdodCIsInBvc2l0aW9uU3RhcnQiLCJzdGFydExpbmUiLCJsaW5lTnVtIiwic3RhcnRDb2wiLCJwb3NOdW0iLCJlbmRMaW5lIiwiZW5kQ29sIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiZ2V0TG9jYXRpb25CeVBhdGhVUkkiLCJwYXRoQXJyYXkiLCJyZXBsYWNlIiwic3BsaXQiLCJnZXRDb2RlRnJhbWVGb3JMb2NhdGlvbiIsInN0YXJ0IiwiZW5kIiwibGluZXNCZWZvcmUiLCJsaW5lc0FmdGVyIiwiZnJhbWVTdGFydCIsImZyYW1lRW5kIiwiYWN0dWFsTGluZXNCZWZvcmUiLCJhY3R1YWxMaW5lc0FmdGVyIiwiY29kZUZyYW1lIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJjb2RlRnJhbWVTdGFydCIsImNvZGVGcmFtZUVuZCIsImNvZGVGcmFtZU1haW4iLCJjb2RlRnJhbWVTdHJpbmciLCJsaW5lcyIsIm1heExpbmVOdW0iLCJtaW5TcGFjZXMiLCJyZWR1Y2UiLCJhY2MiLCJ2YWwiLCJmb3JFYWNoIiwibGluZSIsInNwYWNlcyIsIl8iLCJTdHJpbmciLCJzbGljZSIsInRvU3RyaW5nIiwiam9pbiJd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SWtDLElBQUssRUFBL0IsQ0FBWjtBQUNELEdBSkQ7QUFNQVIsRUFBQUEsZUFBZSxHQUFHQyxLQUFLLENBQUNhLElBQU4sQ0FBVyxJQUFYLENBQWxCO0FBRUEsU0FBT2QsZUFBUDtBQUNELENBbERNOzs7ZUFvRFFyQyxpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNhZmVMb2FkIH0gZnJvbSAneWFtbC1hc3QtcGFyc2VyJztcblxuaW1wb3J0IHtcbiAgb3V0cHV0UmVkLCBvdXRwdXRVbmRlcmxpbmUsIGdldExpbmVOdW1iZXJGcm9tSWQsIG91dHB1dEdyZXksXG59IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgcGFyc2VBU1QgPSAoY3R4KSA9PiB7XG4gIGlmIChjdHguQVNUKSByZXR1cm4gY3R4LkFTVDtcbiAgY3R4LkFTVCA9IHNhZmVMb2FkKGN0eC5zb3VyY2UpO1xuICByZXR1cm4gY3R4LkFTVDtcbn07XG5cbmNvbnN0IGdldE1hcHBpbmdDaGlsZCA9IChtYXBwaW5nLCBjaGlsZE5hbWUpID0+IHtcbiAgY29uc3QgbWFwcGluZ3MgPSBtYXBwaW5nLnZhbHVlID8gbWFwcGluZy52YWx1ZS5tYXBwaW5ncyA6IG1hcHBpbmcubWFwcGluZ3M7XG4gIGNvbnN0IHRhcmdldCA9IG1hcHBpbmdzXG4gICAgLmZpbHRlcigoY2hpbGQpID0+IGNoaWxkLmtleS52YWx1ZSA9PT0gY2hpbGROYW1lKTtcbiAgcmV0dXJuIHRhcmdldCA/IHRhcmdldFswXSA6IG51bGw7XG59O1xuXG5jb25zdCBnZXRTZXF1ZW5jZUVsZW1lbnQgPSAoc2VxLCBpZCkgPT4gKHNlcS52YWx1ZSA/IHNlcS52YWx1ZS5pdGVtc1tpZF0gOiBzZXEuaXRlbXNbaWRdKTtcblxuY29uc3QgZ2V0Tm9kZUJ5UGF0aCA9ICh0cmVlLCBwYXRoLCB0YXJnZXQgPSAndmFsdWUnKSA9PiB7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRhcmdldCA9PT0gJ3ZhbHVlJyA/IHRyZWUgOiB0cmVlLmtleTtcbiAgY29uc3QgbmV4dEtleSA9IHBhdGgucG9wKCk7XG4gIGxldCBuZXh0O1xuICBpZiAoKHRyZWUudmFsdWUgJiYgdHJlZS52YWx1ZS5tYXBwaW5ncykgfHwgdHJlZS5tYXBwaW5ncykge1xuICAgIG5leHQgPSBnZXRNYXBwaW5nQ2hpbGQodHJlZSwgbmV4dEtleSk7XG4gIH0gZWxzZSBpZiAoKHRyZWUudmFsdWUgJiYgdHJlZS52YWx1ZS5pdGVtcykgfHwgdHJlZS5pdGVtcykge1xuICAgIG5leHQgPSBnZXRTZXF1ZW5jZUVsZW1lbnQodHJlZSwgbmV4dEtleSk7XG4gIH1cbiAgcmV0dXJuIGdldE5vZGVCeVBhdGgobmV4dCwgcGF0aCwgdGFyZ2V0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRMb2NhdGlvbkJ5UGF0aCA9IChwYXRoLCBjdHgsIHRhcmdldCkgPT4ge1xuICBjb25zdCBBU1QgPSBwYXJzZUFTVChjdHgpO1xuICBjb25zdCBub2RlID0gZ2V0Tm9kZUJ5UGF0aChBU1QsIHBhdGgucmV2ZXJzZSgpLCB0YXJnZXQpO1xuICBpZiAoIW5vZGUpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGZyYW1lID0gY3R4LnNvdXJjZS5zdWJzdHJpbmcobm9kZS5zdGFydFBvc2l0aW9uLCBub2RlLmVuZFBvc2l0aW9uICsgMSk7XG4gIGNvbnN0IG9mZnNldCA9IGZyYW1lLmxlbmd0aCAtIGZyYW1lLnRyaW1SaWdodCgpLmxlbmd0aDtcblxuICBjb25zdCBwb3NpdGlvblN0YXJ0ID0gZ2V0TGluZU51bWJlckZyb21JZChjdHguc291cmNlLCBub2RlLnN0YXJ0UG9zaXRpb24pO1xuICBjb25zdCBlbmRQb3NpdGlvbiA9IGdldExpbmVOdW1iZXJGcm9tSWQoY3R4LnNvdXJjZSwgbm9kZS5lbmRQb3NpdGlvbiAtIG9mZnNldCk7XG4gIHJldHVybiB7XG4gICAgc3RhcnRMaW5lOiBwb3NpdGlvblN0YXJ0LmxpbmVOdW0sXG4gICAgc3RhcnRDb2w6IHBvc2l0aW9uU3RhcnQucG9zTnVtLFxuICAgIGVuZExpbmU6IGVuZFBvc2l0aW9uLmxpbmVOdW0sXG4gICAgZW5kQ29sOiBlbmRQb3NpdGlvbi5wb3NOdW0sXG4gICAgc3RhcnRJbmRleDogbm9kZS5zdGFydFBvc2l0aW9uLFxuICAgIGVuZEluZGV4OiBub2RlLmVuZFBvc2l0aW9uLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldExvY2F0aW9uQnlQYXRoVVJJID0gKHBhdGgsIGN0eCwgdGFyZ2V0KSA9PiB7XG4gIGNvbnN0IHBhdGhBcnJheSA9IHBhdGgucmVwbGFjZSgnIy8nLCAnJykuc3BsaXQoJy8nKTtcbiAgcmV0dXJuIGdldExvY2F0aW9uQnlQYXRoKHBhdGhBcnJheSwgY3R4LCB0YXJnZXQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvZGVGcmFtZUZvckxvY2F0aW9uID0gKFxuICBzdGFydCwgZW5kLCBzb3VyY2UsIHN0YXJ0TGluZSA9IDAsIGxpbmVzQmVmb3JlID0gMywgbGluZXNBZnRlciA9IDMsXG4pID0+IHtcbiAgbGV0IGZyYW1lU3RhcnQgPSBzdGFydDtcbiAgbGV0IGZyYW1lRW5kID0gZW5kO1xuICBsZXQgYWN0dWFsTGluZXNCZWZvcmUgPSAtMTtcbiAgbGV0IGFjdHVhbExpbmVzQWZ0ZXIgPSAwO1xuXG4gIGZvciAoOyBhY3R1YWxMaW5lc0JlZm9yZSAhPT0gbGluZXNCZWZvcmUgJiYgZnJhbWVTdGFydCA+PSAwOyBmcmFtZVN0YXJ0IC09IDEpIHtcbiAgICBpZiAoc291cmNlW2ZyYW1lU3RhcnQgLSAyXSA9PT0gJ1xcbicpIGFjdHVhbExpbmVzQmVmb3JlICs9IDE7XG4gIH1cblxuICBmb3IgKDsgYWN0dWFsTGluZXNBZnRlciAhPT0gbGluZXNBZnRlciAmJiBmcmFtZUVuZCAhPT0gc291cmNlLmxlbmd0aDsgZnJhbWVFbmQgKz0gMSkge1xuICAgIGlmIChzb3VyY2VbZnJhbWVFbmQgKyAyXSA9PT0gJ1xcbicpIGFjdHVhbExpbmVzQWZ0ZXIgKz0gMTtcbiAgfVxuXG4gIGNvbnN0IGNvZGVGcmFtZSA9IHNvdXJjZS5zdWJzdHJpbmcoZnJhbWVTdGFydCwgZnJhbWVFbmQgKyAxKTtcbiAgbGV0IHN0YXJ0T2Zmc2V0ID0gc3RhcnQgLSBmcmFtZVN0YXJ0O1xuICBsZXQgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBlbmQgLSBzdGFydDtcblxuICBpZiAoZnJhbWVTdGFydCA9PT0gLTEpIHN0YXJ0T2Zmc2V0IC09IDE7XG4gIGlmIChmcmFtZVN0YXJ0ID09PSAtMSkgZW5kT2Zmc2V0IC09IDE7XG5cbiAgY29uc3QgY29kZUZyYW1lU3RhcnQgPSBjb2RlRnJhbWUuc3Vic3RyaW5nKDAsIHN0YXJ0T2Zmc2V0KTtcbiAgY29uc3QgY29kZUZyYW1lRW5kID0gY29kZUZyYW1lLnN1YnN0cmluZyhlbmRPZmZzZXQpO1xuICBjb25zdCBjb2RlRnJhbWVNYWluID0gb3V0cHV0VW5kZXJsaW5lKG91dHB1dFJlZChjb2RlRnJhbWUuc3Vic3RyaW5nKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpKSk7XG4gIGxldCBjb2RlRnJhbWVTdHJpbmcgPSBgJHtjb2RlRnJhbWVTdGFydH0ke2NvZGVGcmFtZU1haW59JHtjb2RlRnJhbWVFbmR9YDtcblxuICBjb25zdCBsaW5lcyA9IGNvZGVGcmFtZVN0cmluZy5zcGxpdCgnXFxuJyk7XG5cbiAgY29uc3QgbWF4TGluZU51bSA9IGxpbmVzLmxlbmd0aCArIHN0YXJ0TGluZTtcblxuICBsZXQgbWluU3BhY2VzID0gbGluZXMucmVkdWNlKChhY2MsIHZhbCkgPT4gKHZhbC5sZW5ndGggPiBhY2MgPyB2YWwubGVuZ3RoIDogYWNjKSwgMCk7XG5cblxuICBsaW5lcy5mb3JFYWNoKChsaW5lKSA9PiB7XG4gICAgbGV0IHNwYWNlcztcbiAgICBmb3IgKHNwYWNlcyA9IDA7IGxpbmVbc3BhY2VzXSA9PT0gJyAnICYmIHNwYWNlcyA8IGxpbmUubGVuZ3RoOyBzcGFjZXMgKz0gMSk7XG4gICAgaWYgKG1pblNwYWNlcyA+IHNwYWNlcykgbWluU3BhY2VzID0gc3BhY2VzO1xuICB9KTtcblxuICBsaW5lcy5mb3JFYWNoKChfLCBpZCkgPT4ge1xuICAgIGNvbnN0IGxpbmVOdW0gPSBTdHJpbmcoYDAke3N0YXJ0TGluZSAtIGFjdHVhbExpbmVzQmVmb3JlICsgaWR9YCkuc2xpY2UoLW1heExpbmVOdW0udG9TdHJpbmcoKS5sZW5ndGgpO1xuICAgIGNvbnN0IGxpbmUgPSBtaW5TcGFjZXMgPj0gNCA/IGxpbmVzW2lkXS5zbGljZShtaW5TcGFjZXMpIDogbGluZXNbaWRdO1xuICAgIGxpbmVzW2lkXSA9IG91dHB1dEdyZXkoYCR7bGluZU51bX18ICR7bGluZX1gKTtcbiAgfSk7XG5cbiAgY29kZUZyYW1lU3RyaW5nID0gbGluZXMuam9pbignXFxuJyk7XG5cbiAgcmV0dXJuIGNvZGVGcmFtZVN0cmluZztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldExvY2F0aW9uQnlQYXRoO1xuIl19