"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getCodeFrameForLocation = exports.getLocationByPath = void 0;

var _yamlAstParser = require("yaml-ast-parser");

var _utils = require("../utils");

const parseAST = ctx => {
  if (ctx.AST) return ctx.AST;
  ctx.AST = (0, _yamlAstParser.safeLoad)(ctx.source);
  return ctx.AST;
};

const getMappingChild = (mapping, childName) => {
  const mappings = mapping.value ? mapping.value.mappings : mapping.mappings;
  const target = mappings.filter(child => child.key.value === childName);
  return target ? target[0] : null;
};

const getSequenceElement = (seq, id) => seq.value ? seq.value.items[id] : seq.items[id];

const getNodeByPath = (tree, path) => {
  if (path.length === 0 || !tree) return tree;
  const nextKey = path.pop();
  let next;

  if (tree.value && tree.value.mappings || tree.mappings) {
    next = getMappingChild(tree, nextKey);
  } else if (tree.value && tree.value.items || tree.items) {
    next = getSequenceElement(tree, nextKey);
  }

  return getNodeByPath(next, path);
};

const getLocationByPath = (path, ctx) => {
  const AST = parseAST(ctx);
  const node = getNodeByPath(AST, path.reverse());
  const positionStart = (0, _utils.getLineNumberFromId)(ctx.source, node.startPosition);
  const endPosition = (0, _utils.getLineNumberFromId)(ctx.source, node.endPosition);
  return {
    startLine: positionStart.lineNum,
    startCol: positionStart.posNum,
    endLine: endPosition.lineNum,
    endCol: endPosition.posNum,
    startIndex: node.startPosition,
    endIndex: node.endPosition
  };
};

exports.getLocationByPath = getLocationByPath;

const getCodeFrameForLocation = (start, end, source, linesBefore = 3, linesAfter = 2) => {
  let frameStart = start;
  let frameEnd = end;
  let actualLinesBefore = -1;
  let actualLinesAfter = -1;

  while (actualLinesBefore !== linesBefore) {
    if (source[frameStart] === '\n') actualLinesBefore += 1;
    frameStart -= 1;
  }

  while (actualLinesAfter !== linesAfter) {
    if (source[frameEnd] === '\n') actualLinesAfter += 1;
    frameEnd += 1;
  }

  const codeFrame = source.substring(frameStart + 1, frameEnd + 1);
  const startOffset = start - frameStart;
  const endOffset = startOffset + end - start;
  return `${codeFrame.substring(0, startOffset - 1)}${(0, _utils.outputUnderline)((0, _utils.outputRed)(codeFrame.substring(startOffset - 1, endOffset)))}${codeFrame.substring(endOffset)}`;
};

exports.getCodeFrameForLocation = getCodeFrameForLocation;
var _default = getLocationByPath;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy95YW1sL2luZGV4LmpzIl0sIm5hbWVzIjpbInBhcnNlQVNUIiwiY3R4IiwiQVNUIiwic291cmNlIiwiZ2V0TWFwcGluZ0NoaWxkIiwibWFwcGluZyIsImNoaWxkTmFtZSIsIm1hcHBpbmdzIiwidmFsdWUiLCJ0YXJnZXQiLCJmaWx0ZXIiLCJjaGlsZCIsImtleSIsImdldFNlcXVlbmNlRWxlbWVudCIsInNlcSIsImlkIiwiaXRlbXMiLCJnZXROb2RlQnlQYXRoIiwidHJlZSIsInBhdGgiLCJsZW5ndGgiLCJuZXh0S2V5IiwicG9wIiwibmV4dCIsImdldExvY2F0aW9uQnlQYXRoIiwibm9kZSIsInJldmVyc2UiLCJwb3NpdGlvblN0YXJ0Iiwic3RhcnRQb3NpdGlvbiIsImVuZFBvc2l0aW9uIiwic3RhcnRMaW5lIiwibGluZU51bSIsInN0YXJ0Q29sIiwicG9zTnVtIiwiZW5kTGluZSIsImVuZENvbCIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsImdldENvZGVGcmFtZUZvckxvY2F0aW9uIiwic3RhcnQiLCJlbmQiLCJsaW5lc0JlZm9yZSIsImxpbmVzQWZ0ZXIiLCJmcmFtZVN0YXJ0IiwiZnJhbWVFbmQiLCJhY3R1YWxMaW5lc0JlZm9yZSIsImFjdHVhbExpbmVzQWZ0ZXIiLCJjb2RlRnJhbWUiLCJzdWJzdHJpbmciLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUVBLE1BQU1BLFFBQVEsR0FBSUMsR0FBRCxJQUFTO0FBQ3hCLE1BQUlBLEdBQUcsQ0FBQ0MsR0FBUixFQUFhLE9BQU9ELEdBQUcsQ0FBQ0MsR0FBWDtBQUNiRCxFQUFBQSxHQUFHLENBQUNDLEdBQUosR0FBVSw2QkFBU0QsR0FBRyxDQUFDRSxNQUFiLENBQVY7QUFDQSxTQUFPRixHQUFHLENBQUNDLEdBQVg7QUFDRCxDQUpEOztBQU1BLE1BQU1FLGVBQWUsR0FBRyxDQUFDQyxPQUFELEVBQVVDLFNBQVYsS0FBd0I7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eEI7O0FBQ0EsU0FBT0QsaUJBQWlCLEtBQUtKLFdBQTdCLEVBQTBDO0FBQ3hDLFFBQUl0QyxNQUFNLENBQUN3QyxVQUFELENBQU4sS0FBdUIsSUFBM0IsRUFBaUNFLGlCQUFpQixJQUFJLENBQXJCO0FBQ2pDRixJQUFBQSxVQUFVLElBQUksQ0FBZDtBQUNEOztBQUNELFNBQU9HLGdCQUFnQixLQUFLSixVQUE1QixFQUF3QztBQUN0QyxRQUFJdkMsTUFBTSxDQUFDeUMsUUFBRCxDQUFOLEtBQXFCLElBQXpCLEVBQStCRSxnQkFBZ0IsSUFBSSxDQUFwQjtBQUMvQkYsSUFBQUEsUUFBUSxJQUFJLENBQVo7QUFDRDs7QUFDRCxRQUFNRyxTQUFTLEdBQUc1QyxNQUFNLENBQUM2QyxTQUFQLENBQWlCTCxVQUFVLEdBQUcsQ0FBOUIsRUFBaUNDLFFBQVEsR0FBRyxDQUE1QyxDQUFsQjtBQUNBLFFBQU1LLFdBQVcsR0FBR1YsS0FBSyxHQUFHSSxVQUE1QjtBQUNBLFFBQU1PLFNBQVMsR0FBR0QsV0FBVyxHQUFHVCxHQUFkLEdBQW9CRCxLQUF0QztBQUNBLFNBQVEsR0FBRVEsU0FBUyxDQUFDQyxTQUFWLENBQW9CLENBQXBCLEVBQXVCQyxXQUFXLEdBQUcsQ0FBckMsQ0FBd0MsR0FBRSw0QkFBZ0Isc0JBQVVGLFNBQVMsQ0FBQ0MsU0FBVixDQUFvQkMsV0FBVyxHQUFHLENBQWxDLEVBQXFDQyxTQUFyQyxDQUFWLENBQWhCLENBQTRFLEdBQUVILFNBQVMsQ0FBQ0MsU0FBVixDQUFvQkUsU0FBcEIsQ0FBK0IsRUFBaks7QUFDRCxDQWpCTTs7O2VBbUJRMUIsaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzYWZlTG9hZCB9IGZyb20gJ3lhbWwtYXN0LXBhcnNlcic7XG5cbmltcG9ydCB7IG91dHB1dFJlZCwgb3V0cHV0VW5kZXJsaW5lLCBnZXRMaW5lTnVtYmVyRnJvbUlkIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBwYXJzZUFTVCA9IChjdHgpID0+IHtcbiAgaWYgKGN0eC5BU1QpIHJldHVybiBjdHguQVNUO1xuICBjdHguQVNUID0gc2FmZUxvYWQoY3R4LnNvdXJjZSk7XG4gIHJldHVybiBjdHguQVNUO1xufTtcblxuY29uc3QgZ2V0TWFwcGluZ0NoaWxkID0gKG1hcHBpbmcsIGNoaWxkTmFtZSkgPT4ge1xuICBjb25zdCBtYXBwaW5ncyA9IG1hcHBpbmcudmFsdWUgPyBtYXBwaW5nLnZhbHVlLm1hcHBpbmdzIDogbWFwcGluZy5tYXBwaW5ncztcbiAgY29uc3QgdGFyZ2V0ID0gbWFwcGluZ3NcbiAgICAuZmlsdGVyKChjaGlsZCkgPT4gY2hpbGQua2V5LnZhbHVlID09PSBjaGlsZE5hbWUpO1xuICByZXR1cm4gdGFyZ2V0ID8gdGFyZ2V0WzBdIDogbnVsbDtcbn07XG5cbmNvbnN0IGdldFNlcXVlbmNlRWxlbWVudCA9IChzZXEsIGlkKSA9PiAoc2VxLnZhbHVlID8gc2VxLnZhbHVlLml0ZW1zW2lkXSA6IHNlcS5pdGVtc1tpZF0pO1xuXG5jb25zdCBnZXROb2RlQnlQYXRoID0gKHRyZWUsIHBhdGgpID0+IHtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwIHx8ICF0cmVlKSByZXR1cm4gdHJlZTtcbiAgY29uc3QgbmV4dEtleSA9IHBhdGgucG9wKCk7XG4gIGxldCBuZXh0O1xuICBpZiAoKHRyZWUudmFsdWUgJiYgdHJlZS52YWx1ZS5tYXBwaW5ncykgfHwgdHJlZS5tYXBwaW5ncykge1xuICAgIG5leHQgPSBnZXRNYXBwaW5nQ2hpbGQodHJlZSwgbmV4dEtleSk7XG4gIH0gZWxzZSBpZiAoKHRyZWUudmFsdWUgJiYgdHJlZS52YWx1ZS5pdGVtcykgfHwgdHJlZS5pdGVtcykge1xuICAgIG5leHQgPSBnZXRTZXF1ZW5jZUVsZW1lbnQodHJlZSwgbmV4dEtleSk7XG4gIH1cbiAgcmV0dXJuIGdldE5vZGVCeVBhdGgobmV4dCwgcGF0aCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TG9jYXRpb25CeVBhdGggPSAocGF0aCwgY3R4KSA9PiB7XG4gIGNvbnN0IEFTVCA9IHBhcnNlQVNUKGN0eCk7XG4gIGNvbnN0IG5vZGUgPSBnZXROb2RlQnlQYXRoKEFTVCwgcGF0aC5yZXZlcnNlKCkpO1xuICBjb25zdCBwb3NpdGlvblN0YXJ0ID0gZ2V0TGluZU51bWJlckZyb21JZChjdHguc291cmNlLCBub2RlLnN0YXJ0UG9zaXRpb24pO1xuICBjb25zdCBlbmRQb3NpdGlvbiA9IGdldExpbmVOdW1iZXJGcm9tSWQoY3R4LnNvdXJjZSwgbm9kZS5lbmRQb3NpdGlvbik7XG4gIHJldHVybiB7XG4gICAgc3RhcnRMaW5lOiBwb3NpdGlvblN0YXJ0LmxpbmVOdW0sXG4gICAgc3RhcnRDb2w6IHBvc2l0aW9uU3RhcnQucG9zTnVtLFxuICAgIGVuZExpbmU6IGVuZFBvc2l0aW9uLmxpbmVOdW0sXG4gICAgZW5kQ29sOiBlbmRQb3NpdGlvbi5wb3NOdW0sXG4gICAgc3RhcnRJbmRleDogbm9kZS5zdGFydFBvc2l0aW9uLFxuICAgIGVuZEluZGV4OiBub2RlLmVuZFBvc2l0aW9uLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvZGVGcmFtZUZvckxvY2F0aW9uID0gKHN0YXJ0LCBlbmQsIHNvdXJjZSwgbGluZXNCZWZvcmUgPSAzLCBsaW5lc0FmdGVyID0gMikgPT4ge1xuICBsZXQgZnJhbWVTdGFydCA9IHN0YXJ0O1xuICBsZXQgZnJhbWVFbmQgPSBlbmQ7XG4gIGxldCBhY3R1YWxMaW5lc0JlZm9yZSA9IC0xO1xuICBsZXQgYWN0dWFsTGluZXNBZnRlciA9IC0xO1xuICB3aGlsZSAoYWN0dWFsTGluZXNCZWZvcmUgIT09IGxpbmVzQmVmb3JlKSB7XG4gICAgaWYgKHNvdXJjZVtmcmFtZVN0YXJ0XSA9PT0gJ1xcbicpIGFjdHVhbExpbmVzQmVmb3JlICs9IDE7XG4gICAgZnJhbWVTdGFydCAtPSAxO1xuICB9XG4gIHdoaWxlIChhY3R1YWxMaW5lc0FmdGVyICE9PSBsaW5lc0FmdGVyKSB7XG4gICAgaWYgKHNvdXJjZVtmcmFtZUVuZF0gPT09ICdcXG4nKSBhY3R1YWxMaW5lc0FmdGVyICs9IDE7XG4gICAgZnJhbWVFbmQgKz0gMTtcbiAgfVxuICBjb25zdCBjb2RlRnJhbWUgPSBzb3VyY2Uuc3Vic3RyaW5nKGZyYW1lU3RhcnQgKyAxLCBmcmFtZUVuZCArIDEpO1xuICBjb25zdCBzdGFydE9mZnNldCA9IHN0YXJ0IC0gZnJhbWVTdGFydDtcbiAgY29uc3QgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBlbmQgLSBzdGFydDtcbiAgcmV0dXJuIGAke2NvZGVGcmFtZS5zdWJzdHJpbmcoMCwgc3RhcnRPZmZzZXQgLSAxKX0ke291dHB1dFVuZGVybGluZShvdXRwdXRSZWQoY29kZUZyYW1lLnN1YnN0cmluZyhzdGFydE9mZnNldCAtIDEsIGVuZE9mZnNldCkpKX0ke2NvZGVGcmFtZS5zdWJzdHJpbmcoZW5kT2Zmc2V0KX1gO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0TG9jYXRpb25CeVBhdGg7XG4iXX0=