"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getCodeFrameForLocation = exports.getLocationByPath = void 0;

var _yamlAstParser = require("yaml-ast-parser");

var _utils = require("../utils");

const parseAST = ctx => {
  if (ctx.AST) return ctx.AST;
  ctx.AST = (0, _yamlAstParser.safeLoad)(ctx.source);
  return ctx.AST;
};

const getMappingChild = (mapping, childName) => {
  const mappings = mapping.value ? mapping.value.mappings : mapping.mappings;
  const target = mappings.filter(child => child.key.value === childName);
  return target ? target[0] : null;
};

const getSequenceElement = (seq, id) => seq.value ? seq.value.items[id] : seq.items[id];

const getNodeByPath = (tree, path, target = 'value') => {
  if (path.length === 0) return target === 'value' ? tree.value : tree.key;
  const nextKey = path.pop();
  let next;

  if (tree.value && tree.value.mappings || tree.mappings) {
    next = getMappingChild(tree, nextKey);
  } else if (tree.value && tree.value.items || tree.items) {
    next = getSequenceElement(tree, nextKey);
  }

  return getNodeByPath(next, path, target);
};

const getLocationByPath = (path, ctx, target) => {
  const AST = parseAST(ctx);
  const node = getNodeByPath(AST, path.reverse(), target);
  const positionStart = (0, _utils.getLineNumberFromId)(ctx.source, node.startPosition);
  const endPosition = (0, _utils.getLineNumberFromId)(ctx.source, node.endPosition);
  return {
    startLine: positionStart.lineNum,
    startCol: positionStart.posNum,
    endLine: endPosition.lineNum,
    endCol: endPosition.posNum,
    startIndex: node.startPosition,
    endIndex: node.endPosition
  };
};

exports.getLocationByPath = getLocationByPath;

const getCodeFrameForLocation = (start, end, source, linesBefore = 3, linesAfter = 2) => {
  let frameStart = start;
  let frameEnd = end;
  let actualLinesBefore = -1;
  let actualLinesAfter = -1;

  while (actualLinesBefore !== linesBefore && frameStart !== 0) {
    if (source[frameStart] === '\n') actualLinesBefore += 1;
    frameStart -= 1;
  }

  while (actualLinesAfter !== linesAfter && frameEnd !== source.length) {
    if (source[frameEnd] === '\n') actualLinesAfter += 1;
    frameEnd += 1;
  }

  const codeFrame = source.substring(frameStart + 1, frameEnd + 1);
  const startOffset = start - frameStart;
  const endOffset = startOffset + end - start;
  return `${codeFrame.substring(0, startOffset - 1)}${(0, _utils.outputUnderline)((0, _utils.outputRed)(codeFrame.substring(startOffset - 1, endOffset)))}${codeFrame.substring(endOffset)}`;
};

exports.getCodeFrameForLocation = getCodeFrameForLocation;
var _default = getLocationByPath;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,