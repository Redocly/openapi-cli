"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateFromFile = exports.validate = void 0;

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _fs = _interopRequireDefault(require("fs"));

var _loader = _interopRequireDefault(require("./loader"));

var _config = _interopRequireDefault(require("./config"));

var _validators = _interopRequireDefault(require("./validators"));

var _traverse = _interopRequireDefault(require("./traverse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createContext(node, sourceFile, filePath, config) {
  return {
    document: node,
    filePath,
    path: [],
    visited: [],
    result: [],
    pathStack: [],
    source: sourceFile,
    enableCodeframe: config && config.enableCodeframe ? config.enableCodeframe : false,
    customRules: config && config.enbaleCustomRuleset ? (0, _loader.default)(config) : [],
    config
  };
}

const validate = (yamlData, filePath, options) => {
  let document;

  try {
    document = _jsYaml.default.safeLoad(yamlData);
  } catch (ex) {
    throw new Error("Can't load yaml file");
  }

  if (!document.openapi) return [];
  if (!options) options = {};
  const config = (0, _config.default)(options);
  const ctx = createContext(document, yamlData, filePath, config);
  console.log(config);
  (0, _traverse.default)(document, _validators.default, ctx);
  return ctx.result;
};

exports.validate = validate;

const validateFromFile = (fName, options) => {
  const resolvedFileName = fName; // path.resolve(fName);

  const doc = _fs.default.readFileSync(resolvedFileName, 'utf-8');

  const validationResult = validate(doc, resolvedFileName, options);
  return validationResult;
};

exports.validateFromFile = validateFromFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YWxpZGF0ZS5qcyJdLCJuYW1lcyI6WyJjcmVhdGVDb250ZXh0Iiwibm9kZSIsInNvdXJjZUZpbGUiLCJmaWxlUGF0aCIsImNvbmZpZyIsImRvY3VtZW50IiwicGF0aCIsInZpc2l0ZWQiLCJyZXN1bHQiLCJwYXRoU3RhY2siLCJzb3VyY2UiLCJlbmFibGVDb2RlZnJhbWUiLCJjdXN0b21SdWxlcyIsImVuYmFsZUN1c3RvbVJ1bGVzZXQiLCJ2YWxpZGF0ZSIsInlhbWxEYXRhIiwib3B0aW9ucyIsInlhbWwiLCJzYWZlTG9hZCIsImV4IiwiRXJyb3IiLCJvcGVuYXBpIiwiY3R4IiwiY29uc29sZSIsImxvZyIsIk9wZW5BUElSb290IiwidmFsaWRhdGVGcm9tRmlsZSIsImZOYW1lIiwicmVzb2x2ZWRGaWxlTmFtZSIsImRvYyIsImZzIiwicmVhZEZpbGVTeW5jIiwidmFsaWRhdGlvblJlc3VsdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBRUEsU0FBU0EsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkJDLFVBQTdCLEVBQXlDQyxRQUF6QyxFQUFtREMsTUFBbkQsRUFBMkQ7QUFDekQsU0FBTztBQUNMQyxJQUFBQSxRQUFRLEVBQUVKLElBREw7QUFFTEUsSUFBQUEsUUFGSztBQUdMRyxJQUFBQSxJQUFJLEVBQUUsRUFIRDtBQUlMQyxJQUFBQSxPQUFPLEVBQUUsRUFKSjtBQUtMQyxJQUFBQSxNQUFNLEVBQUUsRUFMSDtBQU1MQyxJQUFBQSxTQUFTLEVBQUUsRUFOTjtBQU9MQyxJQUFBQSxNQUFNLEVBQUVSLFVBUEg7QUFRTFMsSUFBQUEsZUFBZSxFQUFFUCxNQUFNLElBQUlBLE1BQU0sQ0FBQ08sZUFBakIsR0FBbUNQLE1BQU0sQ0FBQ08sZUFBMUMsR0FBNEQsS0FSeEU7QUFTTEMsSUFBQUEsV0FBVyxFQUFFUixNQUFNLElBQUlBLE1BQU0sQ0FBQ1MsbUJBQWpCLEdBQXVDLHFCQUFZVCxNQUFaLENBQXZDLEdBQTZELEVBVHJFO0FBVUxBLElBQUFBO0FBVkssR0FBUDtBQVlEOztBQUVNLE1BQU1VLFFBQVEsR0FBRyxDQUFDQyxRQUFELEVBQVdaLFFBQVgsRUFBcUJhLE9BQXJCLEtBQWlDO0FBQ3ZELE1BQUlYLFFBQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxRQUFRLEdBQUdZLGdCQUFLQyxRQUFMLENBQWNILFFBQWQsQ0FBWDtBQUNELEdBRkQsQ0FFRSxPQUFPSSxFQUFQLEVBQVc7QUFDWCxVQUFNLElBQUlDLEtBQUosQ0FBVSxzQkFBVixDQUFOO0FBQ0Q7O0FBQ0QsTUFBSSxDQUFDZixRQUFRLENBQUNnQixPQUFkLEVBQXVCLE9BQU8sRUFBUDtBQUV2QixNQUFJLENBQUNMLE9BQUwsRUFBY0EsT0FBTyxHQUFHLEVBQVY7QUFFZCxRQUFNWixNQUFNLEdBQUcscUJBQVVZLE9BQVYsQ0FBZjtBQUNBLFFBQU1NLEdBQUcsR0FBR3RCLGFBQWEsQ0FBQ0ssUUFBRCxFQUFXVSxRQUFYLEVBQXFCWixRQUFyQixFQUErQkMsTUFBL0IsQ0FBekI7QUFFQW1CLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZcEIsTUFBWjtBQUVBLHlCQUFhQyxRQUFiLEVBQXVCb0IsbUJBQXZCLEVBQW9DSCxHQUFwQztBQUVBLFNBQU9BLEdBQUcsQ0FBQ2QsTUFBWDtBQUNELENBbkJNOzs7O0FBcUJBLE1BQU1rQixnQkFBZ0IsR0FBRyxDQUFDQyxLQUFELEVBQVFYLE9BQVIsS0FBb0I7QUFDbEQsUUFBTVksZ0JBQWdCLEdBQUdELEtBQXpCLENBRGtELENBQ2xCOztBQUNoQyxRQUFNRSxHQUFHLEdBQUdDLFlBQUdDLFlBQUgsQ0FBZ0JILGdCQUFoQixFQUFrQyxPQUFsQyxDQUFaOztBQUNBLFFBQU1JLGdCQUFnQixHQUFHbEIsUUFBUSxDQUFDZSxHQUFELEVBQU1ELGdCQUFOLEVBQXdCWixPQUF4QixDQUFqQztBQUNBLFNBQU9nQixnQkFBUDtBQUNELENBTE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFtbCBmcm9tICdqcy15YW1sJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5cbmltcG9ydCBsb2FkUnVsZXNldCBmcm9tICcuL2xvYWRlcic7XG5pbXBvcnQgZ2V0Q29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCBPcGVuQVBJUm9vdCBmcm9tICcuL3ZhbGlkYXRvcnMnO1xuXG5pbXBvcnQgdHJhdmVyc2VOb2RlIGZyb20gJy4vdHJhdmVyc2UnO1xuXG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0KG5vZGUsIHNvdXJjZUZpbGUsIGZpbGVQYXRoLCBjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBkb2N1bWVudDogbm9kZSxcbiAgICBmaWxlUGF0aCxcbiAgICBwYXRoOiBbXSxcbiAgICB2aXNpdGVkOiBbXSxcbiAgICByZXN1bHQ6IFtdLFxuICAgIHBhdGhTdGFjazogW10sXG4gICAgc291cmNlOiBzb3VyY2VGaWxlLFxuICAgIGVuYWJsZUNvZGVmcmFtZTogY29uZmlnICYmIGNvbmZpZy5lbmFibGVDb2RlZnJhbWUgPyBjb25maWcuZW5hYmxlQ29kZWZyYW1lIDogZmFsc2UsXG4gICAgY3VzdG9tUnVsZXM6IGNvbmZpZyAmJiBjb25maWcuZW5iYWxlQ3VzdG9tUnVsZXNldCA/IGxvYWRSdWxlc2V0KGNvbmZpZykgOiBbXSxcbiAgICBjb25maWcsXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZSA9ICh5YW1sRGF0YSwgZmlsZVBhdGgsIG9wdGlvbnMpID0+IHtcbiAgbGV0IGRvY3VtZW50O1xuICB0cnkge1xuICAgIGRvY3VtZW50ID0geWFtbC5zYWZlTG9hZCh5YW1sRGF0YSk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgbG9hZCB5YW1sIGZpbGVcIik7XG4gIH1cbiAgaWYgKCFkb2N1bWVudC5vcGVuYXBpKSByZXR1cm4gW107XG5cbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cbiAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKG9wdGlvbnMpO1xuICBjb25zdCBjdHggPSBjcmVhdGVDb250ZXh0KGRvY3VtZW50LCB5YW1sRGF0YSwgZmlsZVBhdGgsIGNvbmZpZyk7XG5cbiAgY29uc29sZS5sb2coY29uZmlnKTtcblxuICB0cmF2ZXJzZU5vZGUoZG9jdW1lbnQsIE9wZW5BUElSb290LCBjdHgpO1xuXG4gIHJldHVybiBjdHgucmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRnJvbUZpbGUgPSAoZk5hbWUsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgcmVzb2x2ZWRGaWxlTmFtZSA9IGZOYW1lOyAvLyBwYXRoLnJlc29sdmUoZk5hbWUpO1xuICBjb25zdCBkb2MgPSBmcy5yZWFkRmlsZVN5bmMocmVzb2x2ZWRGaWxlTmFtZSwgJ3V0Zi04Jyk7XG4gIGNvbnN0IHZhbGlkYXRpb25SZXN1bHQgPSB2YWxpZGF0ZShkb2MsIHJlc29sdmVkRmlsZU5hbWUsIG9wdGlvbnMpO1xuICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdDtcbn07XG4iXX0=