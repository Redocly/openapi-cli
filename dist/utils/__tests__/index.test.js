"use strict";

var _index = require("../index");

describe('isUrl', () => {
  test('https valid url', () => {
    expect((0, _index.isUrl)('https://redoc.ly')).toEqual(true);
  });
  test('http valid url', () => {
    expect((0, _index.isUrl)('http://redoc.ly')).toEqual(true);
  });
  test('https valid url with query params', () => {
    expect((0, _index.isUrl)('https://redoc.ly/index.php?some_param=21313&other=false')).toEqual(true);
  });
  test('https valid url with custom port', () => {
    expect((0, _index.isUrl)('https://redoc.ly:443')).toEqual(true);
  });
  test('invalid url', () => {
    expect((0, _index.isUrl)('not-a-valid-site:21')).toEqual(false);
  });
});
describe('matchesJsonSchemaType', () => {
  test('string', () => {
    expect((0, _index.matchesJsonSchemaType)('test', 'string')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(35, 'string')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)(1, 'integer')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(1.5, 'integer')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)('string', 'integer')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)(1, 'number')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(1.5, 'number')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)({}, 'number')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)(true, 'boolean')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(false, 'boolean')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(25, 'boolean')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)(null, 'null')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)(0, 'null')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)('', 'null')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)({}, 'null')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)({}, 'object')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)([], 'object')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)(null, 'object')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)('string', 'object')).toEqual(false);
  });
  test('', () => {
    expect((0, _index.matchesJsonSchemaType)([], 'array')).toEqual(true);
    expect((0, _index.matchesJsonSchemaType)({}, 'array')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)(null, 'array')).toEqual(false);
    expect((0, _index.matchesJsonSchemaType)('string', 'array')).toEqual(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9fX3Rlc3RzX18vaW5kZXgudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBQSxRQUFRLENBQUMsT0FBRCxFQUFVLE1BQU07QUFDdEJDLEVBQUFBLElBQUksQ0FBQyxpQkFBRCxFQUFvQixNQUFNO0FBQzVCQyxJQUFBQSxNQUFNLENBQUMsa0JBQU0sa0JBQU4sQ0FBRCxDQUFOLENBQWtDQyxPQUFsQyxDQUEwQyxJQUExQztBQUNELEdBRkcsQ0FBSjtBQUlBRixFQUFBQSxJQUFJLENBQUMsZ0JBQUQsRUFBbUIsTUFBTTtBQUMzQkMsSUFBQUEsTUFBTSxDQUFDLGtCQUFNLGlCQUFOLENBQUQsQ0FBTixDQUFpQ0MsT0FBakMsQ0FBeUMsSUFBekM7QUFDRCxHQUZHLENBQUo7QUFJQUYsRUFBQUEsSUFBSSxDQUFDLG1DQUFELEVBQXNDLE1BQU07QUFDOUNDLElBQUFBLE1BQU0sQ0FBQyxrQkFBTSx5REFBTixDQUFELENBQU4sQ0FBeUVDLE9BQXpFLENBQWlGLElBQWpGO0FBQ0QsR0FGRyxDQUFKO0FBSUFGLEVBQUFBLElBQUksQ0FBQyxrQ0FBRCxFQUFxQyxNQUFNO0FBQzdDQyxJQUFBQSxNQUFNLENBQUMsa0JBQU0sc0JBQU4sQ0FBRCxDQUFOLENBQXNDQyxPQUF0QyxDQUE4QyxJQUE5QztBQUNELEdBRkcsQ0FBSjtBQUlBRixFQUFBQSxJQUFJLENBQUMsYUFBRCxFQUFnQixNQUFNO0FBQ3hCQyxJQUFBQSxNQUFNLENBQUMsa0JBQU0scUJBQU4sQ0FBRCxDQUFOLENBQXFDQyxPQUFyQyxDQUE2QyxLQUE3QztBQUNELEdBRkcsQ0FBSjtBQUdELENBcEJPLENBQVI7QUFzQkFILFFBQVEsQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ3RDQyxFQUFBQSxJQUFJLENBQUMsUUFBRCxFQUFXLE1BQU07QUFDbkJDLElBQUFBLE1BQU0sQ0FBQyxr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R0FMRyxDQUFKO0FBT0FGLEVBQUFBLElBQUksQ0FBQyxFQUFELEVBQUssTUFBTTtBQUNiQyxJQUFBQSxNQUFNLENBQUMsa0NBQXNCLEVBQXRCLEVBQTBCLE9BQTFCLENBQUQsQ0FBTixDQUEyQ0MsT0FBM0MsQ0FBbUQsSUFBbkQ7QUFDQUQsSUFBQUEsTUFBTSxDQUFDLGtDQUFzQixFQUF0QixFQUEwQixPQUExQixDQUFELENBQU4sQ0FBMkNDLE9BQTNDLENBQW1ELEtBQW5EO0FBQ0FELElBQUFBLE1BQU0sQ0FBQyxrQ0FBc0IsSUFBdEIsRUFBNEIsT0FBNUIsQ0FBRCxDQUFOLENBQTZDQyxPQUE3QyxDQUFxRCxLQUFyRDtBQUNBRCxJQUFBQSxNQUFNLENBQUMsa0NBQXNCLFFBQXRCLEVBQWdDLE9BQWhDLENBQUQsQ0FBTixDQUFpREMsT0FBakQsQ0FBeUQsS0FBekQ7QUFDRCxHQUxHLENBQUo7QUFNRCxDQTVDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF0Y2hlc0pzb25TY2hlbWFUeXBlLCBpc1VybCB9IGZyb20gJy4uL2luZGV4JztcblxuZGVzY3JpYmUoJ2lzVXJsJywgKCkgPT4ge1xuICB0ZXN0KCdodHRwcyB2YWxpZCB1cmwnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGlzVXJsKCdodHRwczovL3JlZG9jLmx5JykpLnRvRXF1YWwodHJ1ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2h0dHAgdmFsaWQgdXJsJywgKCkgPT4ge1xuICAgIGV4cGVjdChpc1VybCgnaHR0cDovL3JlZG9jLmx5JykpLnRvRXF1YWwodHJ1ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2h0dHBzIHZhbGlkIHVybCB3aXRoIHF1ZXJ5IHBhcmFtcycsICgpID0+IHtcbiAgICBleHBlY3QoaXNVcmwoJ2h0dHBzOi8vcmVkb2MubHkvaW5kZXgucGhwP3NvbWVfcGFyYW09MjEzMTMmb3RoZXI9ZmFsc2UnKSkudG9FcXVhbCh0cnVlKTtcbiAgfSk7XG5cbiAgdGVzdCgnaHR0cHMgdmFsaWQgdXJsIHdpdGggY3VzdG9tIHBvcnQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGlzVXJsKCdodHRwczovL3JlZG9jLmx5OjQ0MycpKS50b0VxdWFsKHRydWUpO1xuICB9KTtcblxuICB0ZXN0KCdpbnZhbGlkIHVybCcsICgpID0+IHtcbiAgICBleHBlY3QoaXNVcmwoJ25vdC1hLXZhbGlkLXNpdGU6MjEnKSkudG9FcXVhbChmYWxzZSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdtYXRjaGVzSnNvblNjaGVtYVR5cGUnLCAoKSA9PiB7XG4gIHRlc3QoJ3N0cmluZycsICgpID0+IHtcbiAgICBleHBlY3QobWF0Y2hlc0pzb25TY2hlbWFUeXBlKCd0ZXN0JywgJ3N0cmluZycpKS50b0VxdWFsKHRydWUpO1xuICAgIGV4cGVjdChtYXRjaGVzSnNvblNjaGVtYVR5cGUoMzUsICdzdHJpbmcnKSkudG9FcXVhbChmYWxzZSk7XG4gIH0pO1xuXG4gIHRlc3QoJycsICgpID0+IHtcbiAgICBleHBlY3QobWF0Y2hlc0pzb25TY2hlbWFUeXBlKDEsICdpbnRlZ2VyJykpLnRvRXF1YWwodHJ1ZSk7XG4gICAgZXhwZWN0KG1hdGNoZXNKc29uU2NoZW1hVHlwZSgxLjUsICdpbnRlZ2VyJykpLnRvRXF1YWwoZmFsc2UpO1xuICAgIGV4cGVjdChtYXRjaGVzSnNvblNjaGVtYVR5cGUoJ3N0cmluZycsICdpbnRlZ2VyJykpLnRvRXF1YWwoZmFsc2UpO1xuICB9KTtcblxuICB0ZXN0KCcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG1hdGNoZXNKc29uU2NoZW1hVHlwZSgxLCAnbnVtYmVyJykpLnRvRXF1YWwodHJ1ZSk7XG4gICAgZXhwZWN0KG1hdGNoZXNKc29uU2NoZW1hVHlwZSgxLjUsICdudW1iZXInKSkudG9FcXVhbCh0cnVlKTtcbiAgICBleHBlY3QobWF0Y2hlc0pzb25TY2hlbWFUeXBlKHt9LCAnbnVtYmVyJykpLnRvRXF1YWwoZmFsc2UpO1xuICB9KTtcblxuICB0ZXN0KCcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG1hdGNoZXNKc29uU2NoZW1hVHlwZSh0cnVlLCAnYm9vbGVhbicpKS50b0VxdWFsKHRydWUpO1xuICAgIGV4cGVjdChtYXRjaGVzSnNvblNjaGVtYVR5cGUoZmFsc2UsICdib29sZWFuJykpLnRvRXF1YWwodHJ1ZSk7XG4gICAgZXhwZWN0KG1hdGNoZXNKc29uU2NoZW1hVHlwZSgyNSwgJ2Jvb2xlYW4nKSkudG9FcXVhbChmYWxzZSk7XG4gIH0pO1xuXG4gIHRlc3QoJycsICgpID0+IHtcbiAgICBleHBlY3QobWF0Y2hlc0pzb25TY2hlbWFUeXBlKG51bGwsICdudWxsJykpLnRvRXF1YWwodHJ1ZSk7XG4gICAgZXhwZWN0KG1hdGNoZXNKc29uU2NoZW1hVHlwZSgwLCAnbnVsbCcpKS50b0VxdWFsKGZhbHNlKTtcbiAgICBleHBlY3QobWF0Y2hlc0pzb25TY2hlbWFUeXBlKCcnLCAnbnVsbCcpKS50b0VxdWFsKGZhbHNlKTtcbiAgICBleHBlY3QobWF0Y2hlc0pzb25TY2hlbWFUeXBlKHt9LCAnbnVsbCcpKS50b0VxdWFsKGZhbHNlKTtcbiAgfSk7XG5cbiAgdGVzdCgnJywgKCkgPT4ge1xuICAgIGV4cGVjdChtYXRjaGVzSnNvblNjaGVtYVR5cGUoe30sICdvYmplY3QnKSkudG9FcXVhbCh0cnVlKTtcbiAgICBleHBlY3QobWF0Y2hlc0pzb25TY2hlbWFUeXBlKFtdLCAnb2JqZWN0JykpLnRvRXF1YWwoZmFsc2UpO1xuICAgIGV4cGVjdChtYXRjaGVzSnNvblNjaGVtYVR5cGUobnVsbCwgJ29iamVjdCcpKS50b0VxdWFsKGZhbHNlKTtcbiAgICBleHBlY3QobWF0Y2hlc0pzb25TY2hlbWFUeXBlKCdzdHJpbmcnLCAnb2JqZWN0JykpLnRvRXF1YWwoZmFsc2UpO1xuICB9KTtcblxuICB0ZXN0KCcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KG1hdGNoZXNKc29uU2NoZW1hVHlwZShbXSwgJ2FycmF5JykpLnRvRXF1YWwodHJ1ZSk7XG4gICAgZXhwZWN0KG1hdGNoZXNKc29uU2NoZW1hVHlwZSh7fSwgJ2FycmF5JykpLnRvRXF1YWwoZmFsc2UpO1xuICAgIGV4cGVjdChtYXRjaGVzSnNvblNjaGVtYVR5cGUobnVsbCwgJ2FycmF5JykpLnRvRXF1YWwoZmFsc2UpO1xuICAgIGV4cGVjdChtYXRjaGVzSnNvblNjaGVtYVR5cGUoJ3N0cmluZycsICdhcnJheScpKS50b0VxdWFsKGZhbHNlKTtcbiAgfSk7XG59KTtcbiJdfQ==