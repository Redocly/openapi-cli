"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _yaml = require("../yaml");

var _utils = require("../utils");

const prettyPrintError = (error, enableCodeframe) => {
  const message = `${(0, _utils.outputBgRed)(`${error.file}:${error.location.startLine}:${error.location.startCol}`)}` + ` ${(0, _utils.outputGrey)(`at ${error.path}`)}` + `\n${error.message}\n` + `${error.pathStack.length ? '\nError referenced from:' : ''}` + `${error.pathStack.length ? (0, _utils.outputLightBlue)(`\n- ${error.pathStack.join('\n- ')}\n`) : ''}` + `${enableCodeframe ? `\n${error.codeFrame}\n` : ''}`;
  return message;
};

const pathImproveReadability = path => path.map(el => el[0] === '/' ? (0, _utils.outputGrey)('[\'') + (0, _utils.outputLightBlue)(el) + (0, _utils.outputGrey)('\']') : el);

const createError = (msg, node, ctx, target) => {
  let location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx, target);
  if (!location) location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx);
  const body = {
    message: msg,
    path: pathImproveReadability(ctx.path).join('/'),
    pathStack: ctx.pathStack.map(el => `${el.file}#/${el.path.join('/')}`),
    location,
    codeFrame: ctx.enableCodeframe && location ? (0, _yaml.getCodeFrameForLocation)(location.startIndex, location.endIndex, ctx.source, location.startLine) : null,
    value: node,
    file: ctx.filePath,
    severity: 'ERROR'
  };
  return { ...body,
    prettyPrint: () => prettyPrintError(body, ctx.enableCodeframe)
  };
};

var _default = createError;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvci9kZWZhdWx0LmpzIl0sIm5hbWVzIjpbInByZXR0eVByaW50RXJyb3IiLCJlcnJvciIsImVuYWJsZUNvZGVmcmFtZSIsIm1lc3NhZ2UiLCJmaWxlIiwibG9jYXRpb24iLCJzdGFydExpbmUiLCJzdGFydENvbCIsInBhdGgiLCJwYXRoU3RhY2siLCJsZW5ndGgiLCJqb2luIiwiY29kZUZyYW1lIiwicGF0aEltcHJvdmVSZWFkYWJpbGl0eSIsIm1hcCIsImVsIiwiY3JlYXRlRXJyb3IiLCJtc2ciLCJub2RlIiwiY3R4IiwidGFyZ2V0IiwiQXJyYXkiLCJmcm9tIiwiYm9keSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInNvdXJjZSIsInZhbHVlIiwiZmlsZVBhdGgiLCJzZXZlcml0eSIsInByZXR0eVByaW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsZ0JBQWdCLEdBQUcsQ0FBQ0MsS0FBRCxFQUFRQyxlQUFSLEtBQTRCO0FBQ25ELFFBQU1DLE9BQU8sR0FBSSxHQUFFLHdCQUFhLEdBQUVGLEtBQUssQ0FBQ0csSUFBSyxJQUFHSCxLQUFLLENBQUNJLFFBQU4sQ0FBZUMsU0FBVSxJQUFHTCxLQUFLLENBQUNJLFFBQU4sQ0FBZUUsUUFBUyxFQUFqRixDQUFvRixFQUF2RixHQUNiLElBQUcsdUJBQVksTUFBS04sS0FBSyxDQUFDTyxJQUFLLEVBQTVCLENBQStCLEVBRHJCLEdBRWIsS0FBSVAsS0FBSyxDQUFDRSxPQUFRLElBRkwsR0FHYixHQUFFRixLQUFLLENBQUNRLFNBQU4sQ0FBZ0JDLE1BQWhCLEdBQXlCLDBCQUF6QixHQUFzRCxFQUFHLEVBSDlDLEdBSWIsR0FBRVQsS0FBSyxDQUFDUSxTQUFOLENBQWdCQyxNQUFoQixHQUF5Qiw0QkFBaUIsT0FBTVQsS0FBSyxDQUFDUSxTQUFOLENBQWdCRSxJQUFoQixDQUFxQixNQUFyQixDQUE2QixJQUFwRCxDQUF6QixHQUFvRixFQUFHLEVBSjVFLEdBS2IsR0FBRVQsZUFBZSxHQUFJLEtBQUlELEtBQUssQ0FBQ1csU0FBVSxJQUF4QixHQUE4QixFQUFHLEVBTHJEO0FBTUEsU0FBT1QsT0FBUDtBQUNELENBUkQ7O0FBVUEsTUFBTVUsc0JBQXNCLEdBQUlMLElBQUQsSUFBVUEsSUFBSSxDQUFDTSxHQUFMLENBQVVDLEVBQUQsSUFBU0EsRUFBRSxDQUFDLENBQUQsQ0FBRixLQUFVLEdBQVYsR0FBZ0IsdUJBQVcsS0FBWCxJQUFvQiw0QkFBZ0JBLEVBQWhCLENBQXBCLEdBQTBDLHVCQUFXLEtBQVgsQ0FBMUQsR0FBOEVBLEVBQWhHLENBQXpDOztBQUVBLE1BQU1DLFdBQVcsR0FBRyxDQUFDQyxHQUFELEVBQU1DLElBQU4sRUFBWUMsR0FBWixFQUFpQkMsTUFBakIsS0FBNEI7QUFDOUMsTUFBSWYsUUFBUSxHQUFHLDZCQUFrQmdCLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxHQUFHLENBQUNYLElBQWYsQ0FBbEIsRUFBd0NXLEdBQXhDLEVBQTZDQyxNQUE3QyxDQUFmO0FBQ0EsTUFBSSxDQUFDZixRQUFMLEVBQWVBLFFBQVEsR0FBRyw2QkFBa0JnQixLQUFLLENBQUNDLElBQU4sQ0FBV0gsR0FBRyxDQUFDWCxJQUFmLENBQWxCLEVBQXdDVyxHQUF4QyxDQUFYO0FBQ2YsUUFBTUksSUFBSSxHQUFHO0FBQ1hwQixJQUFBQSxPQUFPLEVBQUVjLEdBREU7QUFFWFQsSUFBQUEsSUFBSSxFQUFFSyxzQkFBc0IsQ0FBQ00sR0FBRyxDQUFDWCxJQUFMLENBQXRCLENBQWlDRyxJQUFqQyxDQUFzQyxHQUF0QyxDQUZLO0FBR1hGLElBQUFBLFNBQVMsRUFBRVUsR0FBRyxDQUFDVixTQUFKLENBQWNLLEdBQWQsQ0FBbUJDLEVBQUQsSUFBUyxHQUFFQSxFQUFFLENBQUNYLElBQUssS0FBSVcsRUFBRSxDQUFDUCxJQUFILENBQVFHLElBQVIsQ0FBYSxHQUFiLENBQWtCLEVBQTNELENBSEE7QUFJWE4sSUFBQUEsUUFKVztBQUtYTyxJQUFBQSxTQUFTLEVBQUVPLEdBQUcsQ0FBQ2pCLGVBQUosSUFBdUJHLFFBQXZCLEdBQ1AsbUNBQ0FBLFFBQVEsQ0FBQ21CLFVBRFQsRUFFQW5CLFFBQVEsQ0FBQ29CLFFBRlQsRUFHQU4sR0FBRyxDQUFDTyxNQUhKLEVBSUFyQixRQUFRLENBQUNDLFNBSlQsQ0FETyxHQU9QLElBWk87QUFhWHFCLElBQUFBLEtBQUssRUFBRVQsSUFiSTtBQWNYZCxJQUFBQSxJQUFJLEVBQUVlLEdBQUcsQ0FBQ1MsUUFkQztBQWVYQyxJQUFBQSxRQUFRLEVBQUU7QUFmQyxHQUFiO0FBaUJBLFNBQU8sRUFDTCxHQUFHTixJQURFO0FBRUxPLElBQUFBLFdBQVcsRUFBRSxNQUFNOUIsZ0JBQWdCLENBQUN1QixJQUFELEVBQU9KLEdBQUcsQ0FBQ2pCLGVBQVg7QUFGOUIsR0FBUDtBQUlELENBeEJEOztlQTBCZWMsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldExvY2F0aW9uQnlQYXRoLCBnZXRDb2RlRnJhbWVGb3JMb2NhdGlvbiB9IGZyb20gJy4uL3lhbWwnO1xuaW1wb3J0IHsgb3V0cHV0TGlnaHRCbHVlLCBvdXRwdXRCZ1JlZCwgb3V0cHV0R3JleSB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgcHJldHR5UHJpbnRFcnJvciA9IChlcnJvciwgZW5hYmxlQ29kZWZyYW1lKSA9PiB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBgJHtvdXRwdXRCZ1JlZChgJHtlcnJvci5maWxlfToke2Vycm9yLmxvY2F0aW9uLnN0YXJ0TGluZX06JHtlcnJvci5sb2NhdGlvbi5zdGFydENvbH1gKX1gXG4gICsgYCAke291dHB1dEdyZXkoYGF0ICR7ZXJyb3IucGF0aH1gKX1gXG4gICsgYFxcbiR7ZXJyb3IubWVzc2FnZX1cXG5gXG4gICsgYCR7ZXJyb3IucGF0aFN0YWNrLmxlbmd0aCA/ICdcXG5FcnJvciByZWZlcmVuY2VkIGZyb206JyA6ICcnfWBcbiAgKyBgJHtlcnJvci5wYXRoU3RhY2subGVuZ3RoID8gb3V0cHV0TGlnaHRCbHVlKGBcXG4tICR7ZXJyb3IucGF0aFN0YWNrLmpvaW4oJ1xcbi0gJyl9XFxuYCkgOiAnJ31gXG4gICsgYCR7ZW5hYmxlQ29kZWZyYW1lID8gYFxcbiR7ZXJyb3IuY29kZUZyYW1lfVxcbmAgOiAnJ31gO1xuICByZXR1cm4gbWVzc2FnZTtcbn07XG5cbmNvbnN0IHBhdGhJbXByb3ZlUmVhZGFiaWxpdHkgPSAocGF0aCkgPT4gcGF0aC5tYXAoKGVsKSA9PiAoZWxbMF0gPT09ICcvJyA/IG91dHB1dEdyZXkoJ1tcXCcnKSArIG91dHB1dExpZ2h0Qmx1ZShlbCkgKyBvdXRwdXRHcmV5KCdcXCddJykgOiBlbCkpO1xuXG5jb25zdCBjcmVhdGVFcnJvciA9IChtc2csIG5vZGUsIGN0eCwgdGFyZ2V0KSA9PiB7XG4gIGxldCBsb2NhdGlvbiA9IGdldExvY2F0aW9uQnlQYXRoKEFycmF5LmZyb20oY3R4LnBhdGgpLCBjdHgsIHRhcmdldCk7XG4gIGlmICghbG9jYXRpb24pIGxvY2F0aW9uID0gZ2V0TG9jYXRpb25CeVBhdGgoQXJyYXkuZnJvbShjdHgucGF0aCksIGN0eCk7XG4gIGNvbnN0IGJvZHkgPSB7XG4gICAgbWVzc2FnZTogbXNnLFxuICAgIHBhdGg6IHBhdGhJbXByb3ZlUmVhZGFiaWxpdHkoY3R4LnBhdGgpLmpvaW4oJy8nKSxcbiAgICBwYXRoU3RhY2s6IGN0eC5wYXRoU3RhY2subWFwKChlbCkgPT4gYCR7ZWwuZmlsZX0jLyR7ZWwucGF0aC5qb2luKCcvJyl9YCksXG4gICAgbG9jYXRpb24sXG4gICAgY29kZUZyYW1lOiBjdHguZW5hYmxlQ29kZWZyYW1lICYmIGxvY2F0aW9uXG4gICAgICA/IGdldENvZGVGcmFtZUZvckxvY2F0aW9uKFxuICAgICAgICBsb2NhdGlvbi5zdGFydEluZGV4LFxuICAgICAgICBsb2NhdGlvbi5lbmRJbmRleCxcbiAgICAgICAgY3R4LnNvdXJjZSxcbiAgICAgICAgbG9jYXRpb24uc3RhcnRMaW5lLFxuICAgICAgKVxuICAgICAgOiBudWxsLFxuICAgIHZhbHVlOiBub2RlLFxuICAgIGZpbGU6IGN0eC5maWxlUGF0aCxcbiAgICBzZXZlcml0eTogJ0VSUk9SJyxcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAuLi5ib2R5LFxuICAgIHByZXR0eVByaW50OiAoKSA9PiBwcmV0dHlQcmludEVycm9yKGJvZHksIGN0eC5lbmFibGVDb2RlZnJhbWUpLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRXJyb3I7XG4iXX0=