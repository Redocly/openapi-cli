"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _yaml = require("../yaml");

const prettyPrintError = (error, enableCodeframe) => {
  const message = `${error.location.startLine}:${error.location.startCol}` + ' Following error occured:' + `\n${error.message} by path ${error.path}${error.file ? ` in file ${error.file}` : ''}\n` + `${error.pathStack.length ? '\nError traced by following path:' : ''}` + `${error.pathStack.length ? `\n${error.pathStack.join('\n')}\n` : ''}` + `${enableCodeframe ? `\n${error.codeFrame}\n` : ''}`;
  return message;
};

const createError = (msg, node, ctx, target) => {
  let location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx, target);
  if (!location) location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx);
  const body = {
    message: msg,
    path: ctx.path.join('/'),
    pathStack: ctx.pathStack.map(el => el.join('/')),
    location,
    codeFrame: ctx.enableCodeframe ? (0, _yaml.getCodeFrameForLocation)(location.startIndex, location.endIndex, ctx.source) : null,
    value: node,
    file: ctx.filePath,
    severity: 'ERROR'
  };
  return { ...body,
    prettyPrint: () => prettyPrintError(body, ctx.enableCodeframe)
  };
};

var _default = createError;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvci9kZWZhdWx0LmpzIl0sIm5hbWVzIjpbInByZXR0eVByaW50RXJyb3IiLCJlcnJvciIsImVuYWJsZUNvZGVmcmFtZSIsIm1lc3NhZ2UiLCJsb2NhdGlvbiIsInN0YXJ0TGluZSIsInN0YXJ0Q29sIiwicGF0aCIsImZpbGUiLCJwYXRoU3RhY2siLCJsZW5ndGgiLCJqb2luIiwiY29kZUZyYW1lIiwiY3JlYXRlRXJyb3IiLCJtc2ciLCJub2RlIiwiY3R4IiwidGFyZ2V0IiwiQXJyYXkiLCJmcm9tIiwiYm9keSIsIm1hcCIsImVsIiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic291cmNlIiwidmFsdWUiLCJmaWxlUGF0aCIsInNldmVyaXR5IiwicHJldHR5UHJpbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQSxNQUFNQSxnQkFBZ0IsR0FBRyxDQUFDQyxLQUFELEVBQVFDLGVBQVIsS0FBNEI7QUFDbkQsUUFBTUMsT0FBTyxHQUFJLEdBQUVGLEtBQUssQ0FBQ0csUUFBTixDQUFlQyxTQUFVLElBQUdKLEtBQUssQ0FBQ0csUUFBTixDQUFlRSxRQUFTLEVBQXZELEdBQ2QsMkJBRGMsR0FFYixLQUFJTCxLQUFLLENBQUNFLE9BQVEsWUFBV0YsS0FBSyxDQUFDTSxJQUFLLEdBQUVOLEtBQUssQ0FBQ08sSUFBTixHQUFjLFlBQVdQLEtBQUssQ0FBQ08sSUFBSyxFQUFwQyxHQUF3QyxFQUFHLElBRnhFLEdBR2IsR0FBRVAsS0FBSyxDQUFDUSxTQUFOLENBQWdCQyxNQUFoQixHQUF5QixtQ0FBekIsR0FBK0QsRUFBRyxFQUh2RCxHQUliLEdBQUVULEtBQUssQ0FBQ1EsU0FBTixDQUFnQkMsTUFBaEIsR0FBMEIsS0FBSVQsS0FBSyxDQUFDUSxTQUFOLENBQWdCRSxJQUFoQixDQUFxQixJQUFyQixDQUEyQixJQUF6RCxHQUErRCxFQUFHLEVBSnZELEdBS2IsR0FBRVQsZUFBZSxHQUFJLEtBQUlELEtBQUssQ0FBQ1csU0FBVSxJQUF4QixHQUE4QixFQUFHLEVBTHJEO0FBTUEsU0FBT1QsT0FBUDtBQUNELENBUkQ7O0FBVUEsTUFBTVUsV0FBVyxHQUFHLENBQUNDLEdBQUQsRUFBTUMsSUFBTixFQUFZQyxHQUFaLEVBQWlCQyxNQUFqQixLQUE0QjtBQUM5QyxNQUFJYixRQUFRLEdBQUcsNkJBQWtCYyxLQUFLLENBQUNDLElBQU4sQ0FBV0gsR0FBRyxDQUFDVCxJQUFmLENBQWxCLEVBQXdDUyxHQUF4QyxFQUE2Q0MsTUFBN0MsQ0FBZjtBQUNBLE1BQUksQ0FBQ2IsUUFBTCxFQUFlQSxRQUFRLEdBQUcsNkJBQWtCYyxLQUFLLENBQUNDLElBQU4sQ0FBV0gsR0FBRyxDQUFDVCxJQUFmLENBQWxCLEVBQXdDUyxHQUF4QyxDQUFYO0FBQ2YsUUFBTUksSUFBSSxHQUFHO0FBQ1hqQixJQUFBQSxPQUFPLEVBQUVXLEdBREU7QUFFWFAsSUFBQUEsSUFBSSxFQUFFUyxHQUFHLENBQUNULElBQUosQ0FBU0ksSUFBVCxDQUFjLEdBQWQsQ0FGSztBQUdYRixJQUFBQSxTQUFTLEVBQUVPLEdBQUcsQ0FBQ1AsU0FBSixDQUFjWSxHQUFkLENBQW1CQyxFQUFELElBQVFBLEVBQUUsQ0FBQ1gsSUFBSCxDQUFRLEdBQVIsQ0FBMUIsQ0FIQTtBQUlYUCxJQUFBQSxRQUpXO0FBS1hRLElBQUFBLFNBQVMsRUFBRUksR0FBRyxDQUFDZCxlQUFKLEdBQ1AsbUNBQXdCRSxRQUFRLENBQUNtQixVQUFqQyxFQUE2Q25CLFFBQVEsQ0FBQ29CLFFBQXRELEVBQWdFUixHQUFHLENBQUNTLE1BQXBFLENBRE8sR0FDdUUsSUFOdkU7QUFPWEMsSUFBQUEsS0FBSyxFQUFFWCxJQVBJO0FBUVhQLElBQUFBLElBQUksRUFBRVEsR0FBRyxDQUFDVyxRQVJDO0FBU1hDLElBQUFBLFFBQVEsRUFBRTtBQVRDLEdBQWI7QUFXQSxTQUFPLEVBQ0wsR0FBR1IsSUFERTtBQUVMUyxJQUFBQSxXQUFXLEVBQUUsTUFBTTdCLGdCQUFnQixDQUFDb0IsSUFBRCxFQUFPSixHQUFHLENBQUNkLGVBQVg7QUFGOUIsR0FBUDtBQUlELENBbEJEOztlQW9CZVcsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldExvY2F0aW9uQnlQYXRoLCBnZXRDb2RlRnJhbWVGb3JMb2NhdGlvbiB9IGZyb20gJy4uL3lhbWwnO1xuXG5jb25zdCBwcmV0dHlQcmludEVycm9yID0gKGVycm9yLCBlbmFibGVDb2RlZnJhbWUpID0+IHtcbiAgY29uc3QgbWVzc2FnZSA9IGAke2Vycm9yLmxvY2F0aW9uLnN0YXJ0TGluZX06JHtlcnJvci5sb2NhdGlvbi5zdGFydENvbH1gXG4gICsgJyBGb2xsb3dpbmcgZXJyb3Igb2NjdXJlZDonXG4gICsgYFxcbiR7ZXJyb3IubWVzc2FnZX0gYnkgcGF0aCAke2Vycm9yLnBhdGh9JHtlcnJvci5maWxlID8gYCBpbiBmaWxlICR7ZXJyb3IuZmlsZX1gIDogJyd9XFxuYFxuICArIGAke2Vycm9yLnBhdGhTdGFjay5sZW5ndGggPyAnXFxuRXJyb3IgdHJhY2VkIGJ5IGZvbGxvd2luZyBwYXRoOicgOiAnJ31gXG4gICsgYCR7ZXJyb3IucGF0aFN0YWNrLmxlbmd0aCA/IGBcXG4ke2Vycm9yLnBhdGhTdGFjay5qb2luKCdcXG4nKX1cXG5gIDogJyd9YFxuICArIGAke2VuYWJsZUNvZGVmcmFtZSA/IGBcXG4ke2Vycm9yLmNvZGVGcmFtZX1cXG5gIDogJyd9YDtcbiAgcmV0dXJuIG1lc3NhZ2U7XG59O1xuXG5jb25zdCBjcmVhdGVFcnJvciA9IChtc2csIG5vZGUsIGN0eCwgdGFyZ2V0KSA9PiB7XG4gIGxldCBsb2NhdGlvbiA9IGdldExvY2F0aW9uQnlQYXRoKEFycmF5LmZyb20oY3R4LnBhdGgpLCBjdHgsIHRhcmdldCk7XG4gIGlmICghbG9jYXRpb24pIGxvY2F0aW9uID0gZ2V0TG9jYXRpb25CeVBhdGgoQXJyYXkuZnJvbShjdHgucGF0aCksIGN0eCk7XG4gIGNvbnN0IGJvZHkgPSB7XG4gICAgbWVzc2FnZTogbXNnLFxuICAgIHBhdGg6IGN0eC5wYXRoLmpvaW4oJy8nKSxcbiAgICBwYXRoU3RhY2s6IGN0eC5wYXRoU3RhY2subWFwKChlbCkgPT4gZWwuam9pbignLycpKSxcbiAgICBsb2NhdGlvbixcbiAgICBjb2RlRnJhbWU6IGN0eC5lbmFibGVDb2RlZnJhbWVcbiAgICAgID8gZ2V0Q29kZUZyYW1lRm9yTG9jYXRpb24obG9jYXRpb24uc3RhcnRJbmRleCwgbG9jYXRpb24uZW5kSW5kZXgsIGN0eC5zb3VyY2UpIDogbnVsbCxcbiAgICB2YWx1ZTogbm9kZSxcbiAgICBmaWxlOiBjdHguZmlsZVBhdGgsXG4gICAgc2V2ZXJpdHk6ICdFUlJPUicsXG4gIH07XG4gIHJldHVybiB7XG4gICAgLi4uYm9keSxcbiAgICBwcmV0dHlQcmludDogKCkgPT4gcHJldHR5UHJpbnRFcnJvcihib2R5LCBjdHguZW5hYmxlQ29kZWZyYW1lKSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVycm9yO1xuIl19