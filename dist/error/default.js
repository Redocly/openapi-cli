"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _yaml = require("../yaml");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const prettyPrintError = (error, enableCodeframe) => {
  const message = `${(0, _utils.outputBgRed)(`${error.file}:${error.location.startLine}:${error.location.startCol}`)}` + ` ${(0, _utils.outputGrey)(`at #/${error.path}`)}` // + `\n  at ${outputLightBlue(`${error.file}:${error.location.startLine}:${error.location.startCol}`)} ${outputGrey(`at #/${error.path}`)}`
  + `${error.pathStack.length ? `\n  from ${error.pathStack.reverse().join('\n  from ')}\n` : '\n'}` + `\n${error.message}\n` + `${enableCodeframe ? `\n${error.codeFrame}\n` : ''}` + '\n\n';
  return message;
};

const pathImproveReadability = path => path.map(el => el[0] === '/' ? (0, _utils.outputGrey)('[\'') + (0, _utils.outputLightBlue)(el) + (0, _utils.outputGrey)('\']') : (0, _utils.outputGrey)(el));

const getLocationForPath = (fName, path, target) => {
  const fContent = _fs.default.readFileSync(fName, 'utf-8');

  const tempCtx = {
    source: fContent
  };
  const location = (0, _yaml.getLocationByPath)(Array.from(path), tempCtx, target);
  return location.startLine;
};

const createError = (msg, node, ctx, target) => {
  let location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx, target);
  if (!location) location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx);
  const body = {
    message: msg,
    path: pathImproveReadability(ctx.path).join((0, _utils.outputGrey)('/')),
    pathStack: ctx.pathStack.map(el => {
      const startLine = getLocationForPath(el.file, el.path, target);
      return `${(0, _utils.outputLightBlue)(`${el.file}:${startLine}`)} ${(0, _utils.outputGrey)(`#/${el.path.join('/')}`)}`;
    }),
    location,
    codeFrame: ctx.enableCodeframe && location ? (0, _yaml.getCodeFrameForLocation)(location.startIndex, location.endIndex, ctx.source, location.startLine) : null,
    value: node,
    file: ctx.filePath,
    severity: 'ERROR'
  };
  return { ...body,
    prettyPrint: () => prettyPrintError(body, ctx.enableCodeframe)
  };
};

var _default = createError;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvci9kZWZhdWx0LmpzIl0sIm5hbWVzIjpbInByZXR0eVByaW50RXJyb3IiLCJlcnJvciIsImVuYWJsZUNvZGVmcmFtZSIsIm1lc3NhZ2UiLCJmaWxlIiwibG9jYXRpb24iLCJzdGFydExpbmUiLCJzdGFydENvbCIsInBhdGgiLCJwYXRoU3RhY2siLCJsZW5ndGgiLCJyZXZlcnNlIiwiam9pbiIsImNvZGVGcmFtZSIsInBhdGhJbXByb3ZlUmVhZGFiaWxpdHkiLCJtYXAiLCJlbCIsImdldExvY2F0aW9uRm9yUGF0aCIsImZOYW1lIiwidGFyZ2V0IiwiZkNvbnRlbnQiLCJmcyIsInJlYWRGaWxlU3luYyIsInRlbXBDdHgiLCJzb3VyY2UiLCJBcnJheSIsImZyb20iLCJjcmVhdGVFcnJvciIsIm1zZyIsIm5vZGUiLCJjdHgiLCJib2R5Iiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwidmFsdWUiLCJmaWxlUGF0aCIsInNldmVyaXR5IiwicHJldHR5UHJpbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLGdCQUFnQixHQUFHLENBQUNDLEtBQUQsRUFBUUMsZUFBUixLQUE0QjtBQUNuRCxRQUFNQyxPQUFPLEdBQUksR0FBRSx3QkFBYSxHQUFFRixLQUFLLENBQUNHLElBQUssSUFBR0gsS0FBSyxDQUFDSSxRQUFOLENBQWVDLFNBQVUsSUFBR0wsS0FBSyxDQUFDSSxRQUFOLENBQWVFLFFBQVMsRUFBakYsQ0FBb0YsRUFBdkYsR0FDYixJQUFHLHVCQUFZLFFBQU9OLEtBQUssQ0FBQ08sSUFBSyxFQUE5QixDQUFpQyxFQUR2QixDQUVoQjtBQUZnQixJQUdiLEdBQUVQLEtBQUssQ0FBQ1EsU0FBTixDQUFnQkMsTUFBaEIsR0FBMEIsWUFBV1QsS0FBSyxDQUFDUSxTQUFOLENBQWdCRSxPQUFoQixHQUEwQkMsSUFBMUIsQ0FBK0IsV0FBL0IsQ0FBNEMsSUFBakYsR0FBdUYsSUFBSyxFQUhqRixHQUliLEtBQUlYLEtBQUssQ0FBQ0UsT0FBUSxJQUpMLEdBS2IsR0FBRUQsZUFBZSxHQUFJLEtBQUlELEtBQUssQ0FBQ1ksU0FBVSxJQUF4QixHQUE4QixFQUFHLEVBTHJDLEdBTWQsTUFORjtBQU9BLFNBQU9WLE9BQVA7QUFDRCxDQVREOztBQVdBLE1BQU1XLHNCQUFzQixHQUFJTixJQUFELElBQVVBLElBQUksQ0FBQ08sR0FBTCxDQUFVQyxFQUFELElBQVNBLEVBQUUsQ0FBQyxDQUFELENBQUYsS0FBVSxHQUFWLEdBQWdCLHVCQUFXLEtBQVgsSUFBb0IsNEJBQWdCQSxFQUFoQixDQUFwQixHQUEwQyx1QkFBVyxLQUFYLENBQTFELEdBQThFLHVCQUFXQSxFQUFYLENBQWhHLENBQXpDOztBQUVBLE1BQU1DLGtCQUFrQixHQUFHLENBQUNDLEtBQUQsRUFBUVYsSUFBUixFQUFjVyxNQUFkLEtBQXlCO0FBQ2xELFFBQU1DLFFBQVEsR0FBR0MsWUFBR0MsWUFBSCxDQUFnQkosS0FBaEIsRUFBdUIsT0FBdkIsQ0FBakI7O0FBQ0EsUUFBTUssT0FBTyxHQUFHO0FBQUVDLElBQUFBLE1BQU0sRUFBRUo7QUFBVixHQUFoQjtBQUNBLFFBQU1mLFFBQVEsR0FBRyw2QkFBa0JvQixLQUFLLENBQUNDLElBQU4sQ0FBV2xCLElBQVgsQ0FBbEIsRUFBb0NlLE9BQXBDLEVBQTZDSixNQUE3QyxDQUFqQjtBQUNBLFNBQU9kLFFBQVEsQ0FBQ0MsU0FBaEI7QUFDRCxDQUxEOztBQU9BLE1BQU1xQixXQUFXLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEVBQVlDLEdBQVosRUFBaUJYLE1BQWpCLEtBQTRCO0FBQzlDLE1BQUlkLFFBQVEsR0FBRyw2QkFBa0JvQixLQUFLLENBQUNDLElBQU4sQ0FBV0ksR0FBRyxDQUFDdEIsSUFBZixDQUFsQixFQUF3Q3NCLEdBQXhDLEVBQTZDWCxNQUE3QyxDQUFmO0FBQ0EsTUFBSSxDQUFDZCxRQUFMLEVBQWVBLFFBQVEsR0FBRyw2QkFBa0JvQixLQUFLLENBQUNDLElBQU4sQ0FBV0ksR0FBRyxDQUFDdEIsSUFBZixDQUFsQixFQUF3Q3NCLEdBQXhDLENBQVg7QUFDZixRQUFNQyxJQUFJLEdBQUc7QUFDWDVCLElBQUFBLE9BQU8sRUFBRXlCLEdBREU7QUFFWHBCLElBQUFBLElBQUksRUFBRU0sc0JBQXNCLENBQUNnQixHQUFHLENBQUN0QixJQUFMLENBQXRCLENBQWlDSSxJQUFqQyxDQUFzQyx1QkFBVyxHQUFYLENBQXRDLENBRks7QUFHWEgsSUFBQUEsU0FBUyxFQUFFcUIsR0FBRyxDQUFDckIsU0FBSixDQUFjTSxHQUFkLENBQW1CQyxFQUFELElBQVE7QUFDbkMsWUFBTVYsU0FBUyxHQUFHVyxrQkFBa0IsQ0FBQ0QsRUFBRSxDQUFDWixJQUFKLEVBQVVZLEVBQUUsQ0FBQ1IsSUFBYixFQUFtQlcsTUFBbkIsQ0FBcEM7QUFDQSxhQUFRLEdBQUUsNEJBQWlCLEdBQUVILEVBQUUsQ0FBQ1osSUFBSyxJQUFHRSxTQUFVLEVBQXhDLENBQTJDLElBQUcsdUJBQVksS0FBSVUsRUFBRSxDQUFDUixJQUFILENBQVFJLElBQVIsQ0FBYSxHQUFiLENBQWtCLEVBQWxDLENBQXFDLEVBQTdGO0FBQ0QsS0FIVSxDQUhBO0FBT1hQLElBQUFBLFFBUFc7QUFRWFEsSUFBQUEsU0FBUyxFQUFFaUIsR0FBRyxDQUFDNUIsZUFBSixJQUF1QkcsUUFBdkIsR0FDUCxtQ0FDQUEsUUFBUSxDQUFDMkIsVUFEVCxFQUVBM0IsUUFBUSxDQUFDNEIsUUFGVCxFQUdBSCxHQUFHLENBQUNOLE1BSEosRUFJQW5CLFFBQVEsQ0FBQ0MsU0FKVCxDQURPLEdBT1AsSUFmTztBQWdCWDRCLElBQUFBLEtBQUssRUFBRUwsSUFoQkk7QUFpQlh6QixJQUFBQSxJQUFJLEVBQUUwQixHQUFHLENBQUNLLFFBakJDO0FBa0JYQyxJQUFBQSxRQUFRLEVBQUU7QUFsQkMsR0FBYjtBQW9CQSxTQUFPLEVBQ0wsR0FBR0wsSUFERTtBQUVMTSxJQUFBQSxXQUFXLEVBQUUsTUFBTXJDLGdCQUFnQixDQUFDK0IsSUFBRCxFQUFPRCxHQUFHLENBQUM1QixlQUFYO0FBRjlCLEdBQVA7QUFJRCxDQTNCRDs7ZUE2QmV5QixXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IGdldExvY2F0aW9uQnlQYXRoLCBnZXRDb2RlRnJhbWVGb3JMb2NhdGlvbiB9IGZyb20gJy4uL3lhbWwnO1xuaW1wb3J0IHsgb3V0cHV0TGlnaHRCbHVlLCBvdXRwdXRCZ1JlZCwgb3V0cHV0R3JleSB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgcHJldHR5UHJpbnRFcnJvciA9IChlcnJvciwgZW5hYmxlQ29kZWZyYW1lKSA9PiB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBgJHtvdXRwdXRCZ1JlZChgJHtlcnJvci5maWxlfToke2Vycm9yLmxvY2F0aW9uLnN0YXJ0TGluZX06JHtlcnJvci5sb2NhdGlvbi5zdGFydENvbH1gKX1gXG4gICsgYCAke291dHB1dEdyZXkoYGF0ICMvJHtlcnJvci5wYXRofWApfWBcbiAgLy8gKyBgXFxuICBhdCAke291dHB1dExpZ2h0Qmx1ZShgJHtlcnJvci5maWxlfToke2Vycm9yLmxvY2F0aW9uLnN0YXJ0TGluZX06JHtlcnJvci5sb2NhdGlvbi5zdGFydENvbH1gKX0gJHtvdXRwdXRHcmV5KGBhdCAjLyR7ZXJyb3IucGF0aH1gKX1gXG4gICsgYCR7ZXJyb3IucGF0aFN0YWNrLmxlbmd0aCA/IGBcXG4gIGZyb20gJHtlcnJvci5wYXRoU3RhY2sucmV2ZXJzZSgpLmpvaW4oJ1xcbiAgZnJvbSAnKX1cXG5gIDogJ1xcbid9YFxuICArIGBcXG4ke2Vycm9yLm1lc3NhZ2V9XFxuYFxuICArIGAke2VuYWJsZUNvZGVmcmFtZSA/IGBcXG4ke2Vycm9yLmNvZGVGcmFtZX1cXG5gIDogJyd9YFxuICArICdcXG5cXG4nO1xuICByZXR1cm4gbWVzc2FnZTtcbn07XG5cbmNvbnN0IHBhdGhJbXByb3ZlUmVhZGFiaWxpdHkgPSAocGF0aCkgPT4gcGF0aC5tYXAoKGVsKSA9PiAoZWxbMF0gPT09ICcvJyA/IG91dHB1dEdyZXkoJ1tcXCcnKSArIG91dHB1dExpZ2h0Qmx1ZShlbCkgKyBvdXRwdXRHcmV5KCdcXCddJykgOiBvdXRwdXRHcmV5KGVsKSkpO1xuXG5jb25zdCBnZXRMb2NhdGlvbkZvclBhdGggPSAoZk5hbWUsIHBhdGgsIHRhcmdldCkgPT4ge1xuICBjb25zdCBmQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhmTmFtZSwgJ3V0Zi04Jyk7XG4gIGNvbnN0IHRlbXBDdHggPSB7IHNvdXJjZTogZkNvbnRlbnQgfTtcbiAgY29uc3QgbG9jYXRpb24gPSBnZXRMb2NhdGlvbkJ5UGF0aChBcnJheS5mcm9tKHBhdGgpLCB0ZW1wQ3R4LCB0YXJnZXQpO1xuICByZXR1cm4gbG9jYXRpb24uc3RhcnRMaW5lO1xufTtcblxuY29uc3QgY3JlYXRlRXJyb3IgPSAobXNnLCBub2RlLCBjdHgsIHRhcmdldCkgPT4ge1xuICBsZXQgbG9jYXRpb24gPSBnZXRMb2NhdGlvbkJ5UGF0aChBcnJheS5mcm9tKGN0eC5wYXRoKSwgY3R4LCB0YXJnZXQpO1xuICBpZiAoIWxvY2F0aW9uKSBsb2NhdGlvbiA9IGdldExvY2F0aW9uQnlQYXRoKEFycmF5LmZyb20oY3R4LnBhdGgpLCBjdHgpO1xuICBjb25zdCBib2R5ID0ge1xuICAgIG1lc3NhZ2U6IG1zZyxcbiAgICBwYXRoOiBwYXRoSW1wcm92ZVJlYWRhYmlsaXR5KGN0eC5wYXRoKS5qb2luKG91dHB1dEdyZXkoJy8nKSksXG4gICAgcGF0aFN0YWNrOiBjdHgucGF0aFN0YWNrLm1hcCgoZWwpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0TGluZSA9IGdldExvY2F0aW9uRm9yUGF0aChlbC5maWxlLCBlbC5wYXRoLCB0YXJnZXQpO1xuICAgICAgcmV0dXJuIGAke291dHB1dExpZ2h0Qmx1ZShgJHtlbC5maWxlfToke3N0YXJ0TGluZX1gKX0gJHtvdXRwdXRHcmV5KGAjLyR7ZWwucGF0aC5qb2luKCcvJyl9YCl9YDtcbiAgICB9KSxcbiAgICBsb2NhdGlvbixcbiAgICBjb2RlRnJhbWU6IGN0eC5lbmFibGVDb2RlZnJhbWUgJiYgbG9jYXRpb25cbiAgICAgID8gZ2V0Q29kZUZyYW1lRm9yTG9jYXRpb24oXG4gICAgICAgIGxvY2F0aW9uLnN0YXJ0SW5kZXgsXG4gICAgICAgIGxvY2F0aW9uLmVuZEluZGV4LFxuICAgICAgICBjdHguc291cmNlLFxuICAgICAgICBsb2NhdGlvbi5zdGFydExpbmUsXG4gICAgICApXG4gICAgICA6IG51bGwsXG4gICAgdmFsdWU6IG5vZGUsXG4gICAgZmlsZTogY3R4LmZpbGVQYXRoLFxuICAgIHNldmVyaXR5OiAnRVJST1InLFxuICB9O1xuICByZXR1cm4ge1xuICAgIC4uLmJvZHksXG4gICAgcHJldHR5UHJpbnQ6ICgpID0+IHByZXR0eVByaW50RXJyb3IoYm9keSwgY3R4LmVuYWJsZUNvZGVmcmFtZSksXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVFcnJvcjtcbiJdfQ==