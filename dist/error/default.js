"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _yaml = require("../yaml");

var _utils = require("../utils");

const prettyPrintError = (error, enableCodeframe) => {
  const message = `${(0, _utils.outputBgRed)(`${error.file}:${error.location.startLine}:${error.location.startCol}`)}` + `\n${error.message} by path ${(0, _utils.outputLightBlue)(`#/${error.path}`)}\n` + `${error.pathStack.length ? '\nError referenced from:' : ''}` + `${error.pathStack.length ? (0, _utils.outputLightBlue)(`\n- #/${error.pathStack.join('\n- #/')}\n`) : ''}` + `${enableCodeframe ? `\n${error.codeFrame}\n` : ''}`;
  return message;
};

const createError = (msg, node, ctx, target) => {
  let location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx, target);
  if (!location) location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx);
  const body = {
    message: msg,
    path: ctx.path.join('/'),
    pathStack: ctx.pathStack.map(el => el.join('/')),
    location,
    codeFrame: ctx.enableCodeframe && location ? (0, _yaml.getCodeFrameForLocation)(location.startIndex, location.endIndex, ctx.source, location.startLine) : null,
    value: node,
    file: ctx.filePath,
    severity: 'ERROR'
  };
  return { ...body,
    prettyPrint: () => prettyPrintError(body, ctx.enableCodeframe)
  };
};

var _default = createError;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvci9kZWZhdWx0LmpzIl0sIm5hbWVzIjpbInByZXR0eVByaW50RXJyb3IiLCJlcnJvciIsImVuYWJsZUNvZGVmcmFtZSIsIm1lc3NhZ2UiLCJmaWxlIiwibG9jYXRpb24iLCJzdGFydExpbmUiLCJzdGFydENvbCIsInBhdGgiLCJwYXRoU3RhY2siLCJsZW5ndGgiLCJqb2luIiwiY29kZUZyYW1lIiwiY3JlYXRlRXJyb3IiLCJtc2ciLCJub2RlIiwiY3R4IiwidGFyZ2V0IiwiQXJyYXkiLCJmcm9tIiwiYm9keSIsIm1hcCIsImVsIiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic291cmNlIiwidmFsdWUiLCJmaWxlUGF0aCIsInNldmVyaXR5IiwicHJldHR5UHJpbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxnQkFBZ0IsR0FBRyxDQUFDQyxLQUFELEVBQVFDLGVBQVIsS0FBNEI7QUFDbkQsUUFBTUMsT0FBTyxHQUFJLEdBQUUsd0JBQWEsR0FBRUYsS0FBSyxDQUFDRyxJQUFLLElBQUdILEtBQUssQ0FBQ0ksUUFBTixDQUFlQyxTQUFVLElBQUdMLEtBQUssQ0FBQ0ksUUFBTixDQUFlRSxRQUFTLEVBQWpGLENBQW9GLEVBQXZGLEdBQ2IsS0FBSU4sS0FBSyxDQUFDRSxPQUFRLFlBQVcsNEJBQWlCLEtBQUlGLEtBQUssQ0FBQ08sSUFBSyxFQUFoQyxDQUFtQyxJQURuRCxHQUViLEdBQUVQLEtBQUssQ0FBQ1EsU0FBTixDQUFnQkMsTUFBaEIsR0FBeUIsMEJBQXpCLEdBQXNELEVBQUcsRUFGOUMsR0FHYixHQUFFVCxLQUFLLENBQUNRLFNBQU4sQ0FBZ0JDLE1BQWhCLEdBQXlCLDRCQUFpQixTQUFRVCxLQUFLLENBQUNRLFNBQU4sQ0FBZ0JFLElBQWhCLENBQXFCLFFBQXJCLENBQStCLElBQXhELENBQXpCLEdBQXdGLEVBQUcsRUFIaEYsR0FJYixHQUFFVCxlQUFlLEdBQUksS0FBSUQsS0FBSyxDQUFDVyxTQUFVLElBQXhCLEdBQThCLEVBQUcsRUFKckQ7QUFLQSxTQUFPVCxPQUFQO0FBQ0QsQ0FQRDs7QUFTQSxNQUFNVSxXQUFXLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEVBQVlDLEdBQVosRUFBaUJDLE1BQWpCLEtBQTRCO0FBQzlDLE1BQUlaLFFBQVEsR0FBRyw2QkFBa0JhLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxHQUFHLENBQUNSLElBQWYsQ0FBbEIsRUFBd0NRLEdBQXhDLEVBQTZDQyxNQUE3QyxDQUFmO0FBQ0EsTUFBSSxDQUFDWixRQUFMLEVBQWVBLFFBQVEsR0FBRyw2QkFBa0JhLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxHQUFHLENBQUNSLElBQWYsQ0FBbEIsRUFBd0NRLEdBQXhDLENBQVg7QUFDZixRQUFNSSxJQUFJLEdBQUc7QUFDWGpCLElBQUFBLE9BQU8sRUFBRVcsR0FERTtBQUVYTixJQUFBQSxJQUFJLEVBQUVRLEdBQUcsQ0FBQ1IsSUFBSixDQUFTRyxJQUFULENBQWMsR0FBZCxDQUZLO0FBR1hGLElBQUFBLFNBQVMsRUFBRU8sR0FBRyxDQUFDUCxTQUFKLENBQWNZLEdBQWQsQ0FBbUJDLEVBQUQsSUFBUUEsRUFBRSxDQUFDWCxJQUFILENBQVEsR0FBUixDQUExQixDQUhBO0FBSVhOLElBQUFBLFFBSlc7QUFLWE8sSUFBQUEsU0FBUyxFQUFFSSxHQUFHLENBQUNkLGVBQUosSUFBdUJHLFFBQXZCLEdBQ1AsbUNBQ0FBLFFBQVEsQ0FBQ2tCLFVBRFQsRUFFQWxCLFFBQVEsQ0FBQ21CLFFBRlQsRUFHQVIsR0FBRyxDQUFDUyxNQUhKLEVBSUFwQixRQUFRLENBQUNDLFNBSlQsQ0FETyxHQU9QLElBWk87QUFhWG9CLElBQUFBLEtBQUssRUFBRVgsSUFiSTtBQWNYWCxJQUFBQSxJQUFJLEVBQUVZLEdBQUcsQ0FBQ1csUUFkQztBQWVYQyxJQUFBQSxRQUFRLEVBQUU7QUFmQyxHQUFiO0FBaUJBLFNBQU8sRUFDTCxHQUFHUixJQURFO0FBRUxTLElBQUFBLFdBQVcsRUFBRSxNQUFNN0IsZ0JBQWdCLENBQUNvQixJQUFELEVBQU9KLEdBQUcsQ0FBQ2QsZUFBWDtBQUY5QixHQUFQO0FBSUQsQ0F4QkQ7O2VBMEJlVyxXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TG9jYXRpb25CeVBhdGgsIGdldENvZGVGcmFtZUZvckxvY2F0aW9uIH0gZnJvbSAnLi4veWFtbCc7XG5pbXBvcnQgeyBvdXRwdXRMaWdodEJsdWUsIG91dHB1dEJnUmVkIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5jb25zdCBwcmV0dHlQcmludEVycm9yID0gKGVycm9yLCBlbmFibGVDb2RlZnJhbWUpID0+IHtcbiAgY29uc3QgbWVzc2FnZSA9IGAke291dHB1dEJnUmVkKGAke2Vycm9yLmZpbGV9OiR7ZXJyb3IubG9jYXRpb24uc3RhcnRMaW5lfToke2Vycm9yLmxvY2F0aW9uLnN0YXJ0Q29sfWApfWBcbiAgKyBgXFxuJHtlcnJvci5tZXNzYWdlfSBieSBwYXRoICR7b3V0cHV0TGlnaHRCbHVlKGAjLyR7ZXJyb3IucGF0aH1gKX1cXG5gXG4gICsgYCR7ZXJyb3IucGF0aFN0YWNrLmxlbmd0aCA/ICdcXG5FcnJvciByZWZlcmVuY2VkIGZyb206JyA6ICcnfWBcbiAgKyBgJHtlcnJvci5wYXRoU3RhY2subGVuZ3RoID8gb3V0cHV0TGlnaHRCbHVlKGBcXG4tICMvJHtlcnJvci5wYXRoU3RhY2suam9pbignXFxuLSAjLycpfVxcbmApIDogJyd9YFxuICArIGAke2VuYWJsZUNvZGVmcmFtZSA/IGBcXG4ke2Vycm9yLmNvZGVGcmFtZX1cXG5gIDogJyd9YDtcbiAgcmV0dXJuIG1lc3NhZ2U7XG59O1xuXG5jb25zdCBjcmVhdGVFcnJvciA9IChtc2csIG5vZGUsIGN0eCwgdGFyZ2V0KSA9PiB7XG4gIGxldCBsb2NhdGlvbiA9IGdldExvY2F0aW9uQnlQYXRoKEFycmF5LmZyb20oY3R4LnBhdGgpLCBjdHgsIHRhcmdldCk7XG4gIGlmICghbG9jYXRpb24pIGxvY2F0aW9uID0gZ2V0TG9jYXRpb25CeVBhdGgoQXJyYXkuZnJvbShjdHgucGF0aCksIGN0eCk7XG4gIGNvbnN0IGJvZHkgPSB7XG4gICAgbWVzc2FnZTogbXNnLFxuICAgIHBhdGg6IGN0eC5wYXRoLmpvaW4oJy8nKSxcbiAgICBwYXRoU3RhY2s6IGN0eC5wYXRoU3RhY2subWFwKChlbCkgPT4gZWwuam9pbignLycpKSxcbiAgICBsb2NhdGlvbixcbiAgICBjb2RlRnJhbWU6IGN0eC5lbmFibGVDb2RlZnJhbWUgJiYgbG9jYXRpb25cbiAgICAgID8gZ2V0Q29kZUZyYW1lRm9yTG9jYXRpb24oXG4gICAgICAgIGxvY2F0aW9uLnN0YXJ0SW5kZXgsXG4gICAgICAgIGxvY2F0aW9uLmVuZEluZGV4LFxuICAgICAgICBjdHguc291cmNlLFxuICAgICAgICBsb2NhdGlvbi5zdGFydExpbmUsXG4gICAgICApXG4gICAgICA6IG51bGwsXG4gICAgdmFsdWU6IG5vZGUsXG4gICAgZmlsZTogY3R4LmZpbGVQYXRoLFxuICAgIHNldmVyaXR5OiAnRVJST1InLFxuICB9O1xuICByZXR1cm4ge1xuICAgIC4uLmJvZHksXG4gICAgcHJldHR5UHJpbnQ6ICgpID0+IHByZXR0eVByaW50RXJyb3IoYm9keSwgY3R4LmVuYWJsZUNvZGVmcmFtZSksXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVFcnJvcjtcbiJdfQ==