"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _yaml = require("../yaml");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const prettyPrintError = (error, enableCodeframe) => {
  const message = `${(0, _utils.outputBgRed)(`${error.file}:${error.location.startLine}:${error.location.startCol}`)}` + ` ${(0, _utils.outputGrey)(`at #/${error.path}`)}` + `${error.pathStack.length ? `\n  from ${error.pathStack.reverse().join('\n  from ')}\n` : '\n'}` + `\n${error.message}\n` + `${enableCodeframe ? `\n${error.codeFrame}\n` : ''}` + '\n\n';
  return message;
};

const pathImproveReadability = path => path.map(el => el[0] === '/' ? (0, _utils.outputGrey)('[\'') + (0, _utils.outputLightBlue)(el) + (0, _utils.outputGrey)('\']') : (0, _utils.outputGrey)(el));

const getLocationForPath = (fName, path, target) => {
  const fContent = _fs.default.readFileSync(fName, 'utf-8');

  const tempCtx = {
    source: fContent
  };
  const location = (0, _yaml.getLocationByPath)(Array.from(path), tempCtx, target);
  return location.startLine;
};

const createError = (msg, node, ctx, target) => {
  let location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx, target);
  if (!location) location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx);
  const body = {
    message: msg,
    path: pathImproveReadability(ctx.path).join((0, _utils.outputGrey)('/')),
    pathStack: ctx.pathStack.map(el => {
      const startLine = getLocationForPath(el.file, el.path, target);
      return `${(0, _utils.outputLightBlue)(`${el.file}:${startLine}`)} ${(0, _utils.outputGrey)(`#/${el.path.join('/')}`)}`;
    }),
    location,
    codeFrame: ctx.enableCodeframe && location ? (0, _yaml.getCodeFrameForLocation)(location.startIndex, location.endIndex, ctx.source, location.startLine) : null,
    value: node,
    file: ctx.filePath,
    severity: 'ERROR'
  };
  return { ...body,
    prettyPrint: () => prettyPrintError(body, ctx.enableCodeframe)
  };
};

var _default = createError;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvci9kZWZhdWx0LmpzIl0sIm5hbWVzIjpbInByZXR0eVByaW50RXJyb3IiLCJlcnJvciIsImVuYWJsZUNvZGVmcmFtZSIsIm1lc3NhZ2UiLCJmaWxlIiwibG9jYXRpb24iLCJzdGFydExpbmUiLCJzdGFydENvbCIsInBhdGgiLCJwYXRoU3RhY2siLCJsZW5ndGgiLCJyZXZlcnNlIiwiam9pbiIsImNvZGVGcmFtZSIsInBhdGhJbXByb3ZlUmVhZGFiaWxpdHkiLCJtYXAiLCJlbCIsImdldExvY2F0aW9uRm9yUGF0aCIsImZOYW1lIiwidGFyZ2V0IiwiZkNvbnRlbnQiLCJmcyIsInJlYWRGaWxlU3luYyIsInRlbXBDdHgiLCJzb3VyY2UiLCJBcnJheSIsImZyb20iLCJjcmVhdGVFcnJvciIsIm1zZyIsIm5vZGUiLCJjdHgiLCJib2R5Iiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwidmFsdWUiLCJmaWxlUGF0aCIsInNldmVyaXR5IiwicHJldHR5UHJpbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLGdCQUFnQixHQUFHLENBQUNDLEtBQUQsRUFBUUMsZUFBUixLQUE0QjtBQUNuRCxRQUFNQyxPQUFPLEdBQUksR0FBRSx3QkFBYSxHQUFFRixLQUFLLENBQUNHLElBQUssSUFBR0gsS0FBSyxDQUFDSSxRQUFOLENBQWVDLFNBQVUsSUFBR0wsS0FBSyxDQUFDSSxRQUFOLENBQWVFLFFBQVMsRUFBakYsQ0FBb0YsRUFBdkYsR0FDYixJQUFHLHVCQUFZLFFBQU9OLEtBQUssQ0FBQ08sSUFBSyxFQUE5QixDQUFpQyxFQUR2QixHQUViLEdBQUVQLEtBQUssQ0FBQ1EsU0FBTixDQUFnQkMsTUFBaEIsR0FBMEIsWUFBV1QsS0FBSyxDQUFDUSxTQUFOLENBQWdCRSxPQUFoQixHQUEwQkMsSUFBMUIsQ0FBK0IsV0FBL0IsQ0FBNEMsSUFBakYsR0FBdUYsSUFBSyxFQUZqRixHQUdiLEtBQUlYLEtBQUss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QUFJRCxDQTNCRDs7ZUE2QmV5QixXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IGdldExvY2F0aW9uQnlQYXRoLCBnZXRDb2RlRnJhbWVGb3JMb2NhdGlvbiB9IGZyb20gJy4uL3lhbWwnO1xuaW1wb3J0IHsgb3V0cHV0TGlnaHRCbHVlLCBvdXRwdXRCZ1JlZCwgb3V0cHV0R3JleSB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgcHJldHR5UHJpbnRFcnJvciA9IChlcnJvciwgZW5hYmxlQ29kZWZyYW1lKSA9PiB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBgJHtvdXRwdXRCZ1JlZChgJHtlcnJvci5maWxlfToke2Vycm9yLmxvY2F0aW9uLnN0YXJ0TGluZX06JHtlcnJvci5sb2NhdGlvbi5zdGFydENvbH1gKX1gXG4gICsgYCAke291dHB1dEdyZXkoYGF0ICMvJHtlcnJvci5wYXRofWApfWBcbiAgKyBgJHtlcnJvci5wYXRoU3RhY2subGVuZ3RoID8gYFxcbiAgZnJvbSAke2Vycm9yLnBhdGhTdGFjay5yZXZlcnNlKCkuam9pbignXFxuICBmcm9tICcpfVxcbmAgOiAnXFxuJ31gXG4gICsgYFxcbiR7ZXJyb3IubWVzc2FnZX1cXG5gXG4gICsgYCR7ZW5hYmxlQ29kZWZyYW1lID8gYFxcbiR7ZXJyb3IuY29kZUZyYW1lfVxcbmAgOiAnJ31gXG4gICsgJ1xcblxcbic7XG4gIHJldHVybiBtZXNzYWdlO1xufTtcblxuY29uc3QgcGF0aEltcHJvdmVSZWFkYWJpbGl0eSA9IChwYXRoKSA9PiBwYXRoLm1hcCgoZWwpID0+IChlbFswXSA9PT0gJy8nID8gb3V0cHV0R3JleSgnW1xcJycpICsgb3V0cHV0TGlnaHRCbHVlKGVsKSArIG91dHB1dEdyZXkoJ1xcJ10nKSA6IG91dHB1dEdyZXkoZWwpKSk7XG5cbmNvbnN0IGdldExvY2F0aW9uRm9yUGF0aCA9IChmTmFtZSwgcGF0aCwgdGFyZ2V0KSA9PiB7XG4gIGNvbnN0IGZDb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZOYW1lLCAndXRmLTgnKTtcbiAgY29uc3QgdGVtcEN0eCA9IHsgc291cmNlOiBmQ29udGVudCB9O1xuICBjb25zdCBsb2NhdGlvbiA9IGdldExvY2F0aW9uQnlQYXRoKEFycmF5LmZyb20ocGF0aCksIHRlbXBDdHgsIHRhcmdldCk7XG4gIHJldHVybiBsb2NhdGlvbi5zdGFydExpbmU7XG59O1xuXG5jb25zdCBjcmVhdGVFcnJvciA9IChtc2csIG5vZGUsIGN0eCwgdGFyZ2V0KSA9PiB7XG4gIGxldCBsb2NhdGlvbiA9IGdldExvY2F0aW9uQnlQYXRoKEFycmF5LmZyb20oY3R4LnBhdGgpLCBjdHgsIHRhcmdldCk7XG4gIGlmICghbG9jYXRpb24pIGxvY2F0aW9uID0gZ2V0TG9jYXRpb25CeVBhdGgoQXJyYXkuZnJvbShjdHgucGF0aCksIGN0eCk7XG4gIGNvbnN0IGJvZHkgPSB7XG4gICAgbWVzc2FnZTogbXNnLFxuICAgIHBhdGg6IHBhdGhJbXByb3ZlUmVhZGFiaWxpdHkoY3R4LnBhdGgpLmpvaW4ob3V0cHV0R3JleSgnLycpKSxcbiAgICBwYXRoU3RhY2s6IGN0eC5wYXRoU3RhY2subWFwKChlbCkgPT4ge1xuICAgICAgY29uc3Qgc3RhcnRMaW5lID0gZ2V0TG9jYXRpb25Gb3JQYXRoKGVsLmZpbGUsIGVsLnBhdGgsIHRhcmdldCk7XG4gICAgICByZXR1cm4gYCR7b3V0cHV0TGlnaHRCbHVlKGAke2VsLmZpbGV9OiR7c3RhcnRMaW5lfWApfSAke291dHB1dEdyZXkoYCMvJHtlbC5wYXRoLmpvaW4oJy8nKX1gKX1gO1xuICAgIH0pLFxuICAgIGxvY2F0aW9uLFxuICAgIGNvZGVGcmFtZTogY3R4LmVuYWJsZUNvZGVmcmFtZSAmJiBsb2NhdGlvblxuICAgICAgPyBnZXRDb2RlRnJhbWVGb3JMb2NhdGlvbihcbiAgICAgICAgbG9jYXRpb24uc3RhcnRJbmRleCxcbiAgICAgICAgbG9jYXRpb24uZW5kSW5kZXgsXG4gICAgICAgIGN0eC5zb3VyY2UsXG4gICAgICAgIGxvY2F0aW9uLnN0YXJ0TGluZSxcbiAgICAgIClcbiAgICAgIDogbnVsbCxcbiAgICB2YWx1ZTogbm9kZSxcbiAgICBmaWxlOiBjdHguZmlsZVBhdGgsXG4gICAgc2V2ZXJpdHk6ICdFUlJPUicsXG4gIH07XG4gIHJldHVybiB7XG4gICAgLi4uYm9keSxcbiAgICBwcmV0dHlQcmludDogKCkgPT4gcHJldHR5UHJpbnRFcnJvcihib2R5LCBjdHguZW5hYmxlQ29kZWZyYW1lKSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVycm9yO1xuIl19