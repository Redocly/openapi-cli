"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _yaml = require("../yaml");

var _utils = require("../utils");

const prettyPrintError = (error, enableCodeframe) => {
  const message = `${(0, _utils.outputBgRed)(`${error.file}:${error.location.startLine}:${error.location.startCol}`)}` + `\n${error.message} by path ${(0, _utils.outputLightBlue)(`#/${error.path}`)}\n` + `${error.pathStack.length ? '\nError referenced from:' : ''}` + `${error.pathStack.length ? (0, _utils.outputLightBlue)(`\n- ${error.pathStack.join('\n- ')}\n`) : ''}` + `${enableCodeframe ? `\n${error.codeFrame}\n` : ''}`;
  return message;
};

const createError = (msg, node, ctx, target) => {
  let location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx, target);
  if (!location) location = (0, _yaml.getLocationByPath)(Array.from(ctx.path), ctx);
  const body = {
    message: msg,
    path: ctx.path.join('/'),
    pathStack: ctx.pathStack.map(el => `${el.file}#/${el.path.join('/')}`),
    location,
    codeFrame: ctx.enableCodeframe && location ? (0, _yaml.getCodeFrameForLocation)(location.startIndex, location.endIndex, ctx.source, location.startLine) : null,
    value: node,
    file: ctx.filePath,
    severity: 'ERROR'
  };
  return { ...body,
    prettyPrint: () => prettyPrintError(body, ctx.enableCodeframe)
  };
};

var _default = createError;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvci9kZWZhdWx0LmpzIl0sIm5hbWVzIjpbInByZXR0eVByaW50RXJyb3IiLCJlcnJvciIsImVuYWJsZUNvZGVmcmFtZSIsIm1lc3NhZ2UiLCJmaWxlIiwibG9jYXRpb24iLCJzdGFydExpbmUiLCJzdGFydENvbCIsInBhdGgiLCJwYXRoU3RhY2siLCJsZW5ndGgiLCJqb2luIiwiY29kZUZyYW1lIiwiY3JlYXRlRXJyb3IiLCJtc2ciLCJub2RlIiwiY3R4IiwidGFyZ2V0IiwiQXJyYXkiLCJmcm9tIiwiYm9keSIsIm1hcCIsImVsIiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic291cmNlIiwidmFsdWUiLCJmaWxlUGF0aCIsInNldmVyaXR5IiwicHJldHR5UHJpbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxnQkFBZ0IsR0FBRyxDQUFDQyxLQUFELEVBQVFDLGVBQVIsS0FBNEI7QUFDbkQsUUFBTUMsT0FBTyxHQUFJLEdBQUUsd0JBQWEsR0FBRUYsS0FBSyxDQUFDRyxJQUFLLElBQUdILEtBQUssQ0FBQ0ksUUFBTixDQUFlQyxTQUFVLElBQUdMLEtBQUssQ0FBQ0ksUUFBTixDQUFlRSxRQUFTLEVBQWpGLENBQW9GLEVBQXZGLEdBQ2IsS0FBSU4sS0FBSyxDQUFDRSxPQUFRLFlBQVcsNEJBQWlCLEtBQUlGLEtBQUssQ0FBQ08sSUFBSyxFQUFoQyxDQUFtQyxJQURuRCxHQUViLEdBQUVQLEtBQUssQ0FBQ1EsU0FBTixDQUFnQkMsTUFBaEIsR0FBeUIsMEJBQXpCLEdBQXNELEVBQUcsRUFGOUMsR0FHYixHQUFFVCxLQUFLLENBQUNRLFNBQU4sQ0FBZ0JDLE1BQWhCLEdBQXlCLDRCQUFpQixPQUFNVCxLQUFLLENBQUNRLFNBQU4sQ0FBZ0JFLElBQWhCLENBQXFCLE1BQXJCLENBQTZCLElBQXBELENBQXpCLEdBQW9GLEVBQUcsRUFINUUsR0FJYixHQUFFVCxlQUFlLEdBQUksS0FBSUQsS0FBSyxDQUFDVyxTQUFVLElBQXhCLEdBQThCLEVBQUcsRUFKckQ7QUFLQSxTQUFPVCxPQUFQO0FBQ0QsQ0FQRDs7QUFTQSxNQUFNVSxXQUFXLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEVBQVlDLEdBQVosRUFBaUJDLE1BQWpCLEtBQTRCO0FBQzlDLE1BQUlaLFFBQVEsR0FBRyw2QkFBa0JhLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxHQUFHLENBQUNSLElBQWYsQ0FBbEIsRUFBd0NRLEdBQXhDLEVBQTZDQyxNQUE3QyxDQUFmO0FBQ0EsTUFBSSxDQUFDWixRQUFMLEVBQWVBLFFBQVEsR0FBRyw2QkFBa0JhLEtBQUssQ0FBQ0MsSUFBTixDQUFXSCxHQUFHLENBQUNSLElBQWYsQ0FBbEIsRUFBd0NRLEdBQXhDLENBQVg7QUFDZixRQUFNSSxJQUFJLEdBQUc7QUFDWGpCLElBQUFBLE9BQU8sRUFBRVcsR0FERTtBQUVYTixJQUFBQSxJQUFJLEVBQUVRLEdBQUcsQ0FBQ1IsSUFBSixDQUFTRyxJQUFULENBQWMsR0FBZCxDQUZLO0FBR1hGLElBQUFBLFNBQVMsRUFBRU8sR0FBRyxDQUFDUCxTQUFKLENBQWNZLEdBQWQsQ0FBbUJDLEVBQUQsSUFBUyxHQUFFQSxFQUFFLENBQUNsQixJQUFLLEtBQUlrQixFQUFFLENBQUNkLElBQUgsQ0FBUUcsSUFBUixDQUFhLEdBQWIsQ0FBa0IsRUFBM0QsQ0FIQTtBQUlYTixJQUFBQSxRQUpXO0FBS1hPLElBQUFBLFNBQVMsRUFBRUksR0FBRyxDQUFDZCxlQUFKLElBQXVCRyxRQUF2QixHQUNQLG1DQUNBQSxRQUFRLENBQUNrQixVQURULEVBRUFsQixRQUFRLENBQUNtQixRQUZULEVBR0FSLEdBQUcsQ0FBQ1MsTUFISixFQUlBcEIsUUFBUSxDQUFDQyxTQUpULENBRE8sR0FPUCxJQVpPO0FBYVhvQixJQUFBQSxLQUFLLEVBQUVYLElBYkk7QUFjWFgsSUFBQUEsSUFBSSxFQUFFWSxHQUFHLENBQUNXLFFBZEM7QUFlWEMsSUFBQUEsUUFBUSxFQUFFO0FBZkMsR0FBYjtBQWlCQSxTQUFPLEVBQ0wsR0FBR1IsSUFERTtBQUVMUyxJQUFBQSxXQUFXLEVBQUUsTUFBTTdCLGdCQUFnQixDQUFDb0IsSUFBRCxFQUFPSixHQUFHLENBQUNkLGVBQVg7QUFGOUIsR0FBUDtBQUlELENBeEJEOztlQTBCZVcsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldExvY2F0aW9uQnlQYXRoLCBnZXRDb2RlRnJhbWVGb3JMb2NhdGlvbiB9IGZyb20gJy4uL3lhbWwnO1xuaW1wb3J0IHsgb3V0cHV0TGlnaHRCbHVlLCBvdXRwdXRCZ1JlZCB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgcHJldHR5UHJpbnRFcnJvciA9IChlcnJvciwgZW5hYmxlQ29kZWZyYW1lKSA9PiB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBgJHtvdXRwdXRCZ1JlZChgJHtlcnJvci5maWxlfToke2Vycm9yLmxvY2F0aW9uLnN0YXJ0TGluZX06JHtlcnJvci5sb2NhdGlvbi5zdGFydENvbH1gKX1gXG4gICsgYFxcbiR7ZXJyb3IubWVzc2FnZX0gYnkgcGF0aCAke291dHB1dExpZ2h0Qmx1ZShgIy8ke2Vycm9yLnBhdGh9YCl9XFxuYFxuICArIGAke2Vycm9yLnBhdGhTdGFjay5sZW5ndGggPyAnXFxuRXJyb3IgcmVmZXJlbmNlZCBmcm9tOicgOiAnJ31gXG4gICsgYCR7ZXJyb3IucGF0aFN0YWNrLmxlbmd0aCA/IG91dHB1dExpZ2h0Qmx1ZShgXFxuLSAke2Vycm9yLnBhdGhTdGFjay5qb2luKCdcXG4tICcpfVxcbmApIDogJyd9YFxuICArIGAke2VuYWJsZUNvZGVmcmFtZSA/IGBcXG4ke2Vycm9yLmNvZGVGcmFtZX1cXG5gIDogJyd9YDtcbiAgcmV0dXJuIG1lc3NhZ2U7XG59O1xuXG5jb25zdCBjcmVhdGVFcnJvciA9IChtc2csIG5vZGUsIGN0eCwgdGFyZ2V0KSA9PiB7XG4gIGxldCBsb2NhdGlvbiA9IGdldExvY2F0aW9uQnlQYXRoKEFycmF5LmZyb20oY3R4LnBhdGgpLCBjdHgsIHRhcmdldCk7XG4gIGlmICghbG9jYXRpb24pIGxvY2F0aW9uID0gZ2V0TG9jYXRpb25CeVBhdGgoQXJyYXkuZnJvbShjdHgucGF0aCksIGN0eCk7XG4gIGNvbnN0IGJvZHkgPSB7XG4gICAgbWVzc2FnZTogbXNnLFxuICAgIHBhdGg6IGN0eC5wYXRoLmpvaW4oJy8nKSxcbiAgICBwYXRoU3RhY2s6IGN0eC5wYXRoU3RhY2subWFwKChlbCkgPT4gYCR7ZWwuZmlsZX0jLyR7ZWwucGF0aC5qb2luKCcvJyl9YCksXG4gICAgbG9jYXRpb24sXG4gICAgY29kZUZyYW1lOiBjdHguZW5hYmxlQ29kZWZyYW1lICYmIGxvY2F0aW9uXG4gICAgICA/IGdldENvZGVGcmFtZUZvckxvY2F0aW9uKFxuICAgICAgICBsb2NhdGlvbi5zdGFydEluZGV4LFxuICAgICAgICBsb2NhdGlvbi5lbmRJbmRleCxcbiAgICAgICAgY3R4LnNvdXJjZSxcbiAgICAgICAgbG9jYXRpb24uc3RhcnRMaW5lLFxuICAgICAgKVxuICAgICAgOiBudWxsLFxuICAgIHZhbHVlOiBub2RlLFxuICAgIGZpbGU6IGN0eC5maWxlUGF0aCxcbiAgICBzZXZlcml0eTogJ0VSUk9SJyxcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAuLi5ib2R5LFxuICAgIHByZXR0eVByaW50OiAoKSA9PiBwcmV0dHlQcmludEVycm9yKGJvZHksIGN0eC5lbmFibGVDb2RlZnJhbWUpLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRXJyb3I7XG4iXX0=