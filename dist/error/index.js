"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.createErrorMutuallyExclusiveFields = exports.createErrrorFieldTypeMismatch = exports.createErrorMissingRequiredField = exports.createErrorFieldNotAllowed = void 0;

var _default2 = _interopRequireDefault(require("./default"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createErrorFieldNotAllowed = (fieldName, node, ctx) => (0, _default2.default)(`The field '${fieldName}' is not allowed here. Use "x-" prefix to override this behavior`, node, ctx, 'key');

exports.createErrorFieldNotAllowed = createErrorFieldNotAllowed;

const createErrorMissingRequiredField = (fieldName, node, ctx) => (0, _default2.default)(`The field '${fieldName}' must be present on this level`, node, ctx, 'key');

exports.createErrorMissingRequiredField = createErrorMissingRequiredField;

const createErrrorFieldTypeMismatch = (desiredType, node, ctx) => (0, _default2.default)(`This field must be of ${desiredType} type`, node, ctx, 'key');

exports.createErrrorFieldTypeMismatch = createErrrorFieldTypeMismatch;

const createErrorMutuallyExclusiveFields = (fieldNames, node, ctx) => (0, _default2.default)(`Fields ${fieldNames.map(el => `'${el}'`).join(', ')} are mutually exclusive`, node, ctx, 'key');

exports.createErrorMutuallyExclusiveFields = createErrorMutuallyExclusiveFields;
var _default = _default2.default;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvci9pbmRleC5qcyJdLCJuYW1lcyI6WyJjcmVhdGVFcnJvckZpZWxkTm90QWxsb3dlZCIsImZpZWxkTmFtZSIsIm5vZGUiLCJjdHgiLCJjcmVhdGVFcnJvck1pc3NpbmdSZXF1aXJlZEZpZWxkIiwiY3JlYXRlRXJycm9yRmllbGRUeXBlTWlzbWF0Y2giLCJkZXNpcmVkVHlwZSIsImNyZWF0ZUVycm9yTXV0dWFsbHlFeGNsdXNpdmVGaWVsZHMiLCJmaWVsZE5hbWVzIiwibWFwIiwiZWwiLCJqb2luIiwiY3JlYXRlRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVPLE1BQU1BLDBCQUEwQixHQUFHLENBQUNDLFNBQUQsRUFBWUMsSUFBWixFQUFrQkMsR0FBbEIsS0FBMEIsdUJBQ2pFLGNBQWFGLFNBQVUsa0VBRDBDLEVBQ3lCQyxJQUR6QixFQUMrQkMsR0FEL0IsRUFDb0MsS0FEcEMsQ0FBN0Q7Ozs7QUFJQSxNQUFNQywrQkFBK0IsR0FBRyxDQUFDSCxTQUFELEVBQVlDLElBQVosRUFBa0JDLEdBQWxCLEtBQTBCLHVCQUN0RSxjQUFhRixTQUFVLGlDQUQrQyxFQUNiQyxJQURhLEVBQ1BDLEdBRE8sRUFDRixLQURFLENBQWxFOzs7O0FBSUEsTUFBTUUsNkJBQTZCLEdBQUcsQ0FBQ0MsV0FBRCxFQUFjSixJQUFkLEVBQW9CQyxHQUFwQixLQUE0Qix1QkFDdEUseUJBQXdCRyxXQUFZLE9BRGtDLEVBQzFCSixJQUQwQixFQUNwQkMsR0FEb0IsRUFDZixLQURlLENBQWxFOzs7O0FBSUEsTUFBTUksa0NBQWtDLEdBQUcsQ0FBQ0MsVUFBRCxFQUFhTixJQUFiLEVBQW1CQyxHQUFuQixLQUEyQix1QkFDMUUsVUFBU0ssVUFBVSxDQUFDQyxHQUFYLENBQWdCQyxFQUFELElBQVMsSUFBR0EsRUFBRyxHQUE5QixFQUFrQ0MsSUFBbEMsQ0FBdUMsSUFBdkMsQ0FBNkMseUJBRG9CLEVBQ01ULElBRE4sRUFDWUMsR0FEWixFQUNpQixLQURqQixDQUF0RTs7O2VBSVFTLGlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUVycm9yIGZyb20gJy4vZGVmYXVsdCc7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVFcnJvckZpZWxkTm90QWxsb3dlZCA9IChmaWVsZE5hbWUsIG5vZGUsIGN0eCkgPT4gY3JlYXRlRXJyb3IoXG4gIGBUaGUgZmllbGQgJyR7ZmllbGROYW1lfScgaXMgbm90IGFsbG93ZWQgaGVyZS4gVXNlIFwieC1cIiBwcmVmaXggdG8gb3ZlcnJpZGUgdGhpcyBiZWhhdmlvcmAsIG5vZGUsIGN0eCwgJ2tleScsXG4pO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRXJyb3JNaXNzaW5nUmVxdWlyZWRGaWVsZCA9IChmaWVsZE5hbWUsIG5vZGUsIGN0eCkgPT4gY3JlYXRlRXJyb3IoXG4gIGBUaGUgZmllbGQgJyR7ZmllbGROYW1lfScgbXVzdCBiZSBwcmVzZW50IG9uIHRoaXMgbGV2ZWxgLCBub2RlLCBjdHgsICdrZXknLFxuKTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVycnJvckZpZWxkVHlwZU1pc21hdGNoID0gKGRlc2lyZWRUeXBlLCBub2RlLCBjdHgpID0+IGNyZWF0ZUVycm9yKFxuICBgVGhpcyBmaWVsZCBtdXN0IGJlIG9mICR7ZGVzaXJlZFR5cGV9IHR5cGVgLCBub2RlLCBjdHgsICdrZXknLFxuKTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVycm9yTXV0dWFsbHlFeGNsdXNpdmVGaWVsZHMgPSAoZmllbGROYW1lcywgbm9kZSwgY3R4KSA9PiBjcmVhdGVFcnJvcihcbiAgYEZpZWxkcyAke2ZpZWxkTmFtZXMubWFwKChlbCkgPT4gYCcke2VsfSdgKS5qb2luKCcsICcpfSBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlYCwgbm9kZSwgY3R4LCAna2V5Jyxcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVycm9yO1xuIl19