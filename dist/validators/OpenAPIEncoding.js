"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _OpenAPIHeader = require("./OpenAPIHeader");

var _error = require("../error");

// eslint-disable-next-line import/no-cycle
var _default = {
  validators: {
    contentType() {
      return (node, ctx) => {
        if (node && node.contentType && typeof node.contentType !== 'string') {
          return (0, _error.createErrrorFieldTypeMismatch)('string', node, ctx);
        }

        return null;
      };
    },

    style() {
      return (node, ctx) => {
        if (node && node.style && typeof node.style !== 'string') {
          return (0, _error.createErrrorFieldTypeMismatch)('string', node, ctx);
        }

        return null;
      };
    },

    explode() {
      return (node, ctx) => {
        if (node && node.explode && typeof node.explode !== 'boolean') {
          return (0, _error.createErrrorFieldTypeMismatch)('boolean', node, ctx);
        }

        return null;
      };
    },

    allowReserved() {
      return (node, ctx) => {
        if (node && node.allowReserved && typeof node.allowReserved !== 'boolean') {
          return (0, _error.createErrrorFieldTypeMismatch)('boolean', node, ctx);
        }

        return null;
      };
    }

  },
  properties: {
    headers: _OpenAPIHeader.OpenAPIHeaderMap
  }
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWxpZGF0b3JzL09wZW5BUElFbmNvZGluZy5qcyJdLCJuYW1lcyI6WyJ2YWxpZGF0b3JzIiwiY29udGVudFR5cGUiLCJub2RlIiwiY3R4Iiwic3R5bGUiLCJleHBsb2RlIiwiYWxsb3dSZXNlcnZlZCIsInByb3BlcnRpZXMiLCJoZWFkZXJzIiwiT3BlbkFQSUhlYWRlck1hcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUNBOztBQUZBO2VBSWU7QUFDYkEsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLFdBQVcsR0FBRztBQUNaLGFBQU8sQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNELFdBQWIsSUFBNEIsT0FBT0MsSUFBSSxDQUFDRCxXQUFaLEtBQTRCLFFBQTVELEVBQXNFO0FBQ3BFLGlCQUFPLDBDQUE4QixRQUE5QixFQUF3Q0MsSUFBeEMsRUFBOENDLEdBQTlDLENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRCxPQUxEO0FBTUQsS0FSUzs7QUFTVkMsSUFBQUEsS0FBSyxHQUFHO0FBQ04sYUFBTyxDQUFDRixJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNwQixZQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ0UsS0FBYixJQUFzQixPQUFPRixJQUFJLENBQUNFLEtBQVosS0FBc0IsUUFBaEQsRUFBMEQ7QUFDeEQsaUJBQU8sMENBQThCLFFBQTlCLEVBQXdDRixJQUF4QyxFQUE4Q0MsR0FBOUMsQ0FBUDtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNELE9BTEQ7QUFNRCxLQWhCUzs7QUFpQlZFLElBQUFBLE9BQU8sR0FBRztBQUNSLGFBQU8sQ0FBQ0gsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNHLE9BQWIsSUFBd0IsT0FBT0gsSUFBSSxDQUFDRyxPQUFaLEtBQXdCLFNBQXBELEVBQStEO0FBQzdELGlCQUFPLDBDQUE4QixTQUE5QixFQUF5Q0gsSUFBekMsRUFBK0NDLEdBQS9DLENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRCxPQUxEO0FBTUQsS0F4QlM7O0FBeUJWRyxJQUFBQSxhQUFhLEdBQUc7QUFDZCxhQUFPLENBQUNKLElBQUQsRUFBT0MsR0FBUCxLQUFlO0FBQ3BCLFlBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDSSxhQUFiLElBQThCLE9BQU9KLElBQUksQ0FBQ0ksYUFBWixLQUE4QixTQUFoRSxFQUEyRTtBQUN6RSxpQkFBTywwQ0FBOEIsU0FBOUIsRUFBeUNKLElBQXpDLEVBQStDQyxHQUEvQyxDQUFQO0FBQ0Q7O0FBQ0QsZUFBTyxJQUFQO0FBQ0QsT0FMRDtBQU1EOztBQWhDUyxHQURDO0FBbUNiSSxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsT0FBTyxFQUFFQztBQURDO0FBbkNDLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWN5Y2xlXG5pbXBvcnQgeyBPcGVuQVBJSGVhZGVyTWFwIH0gZnJvbSAnLi9PcGVuQVBJSGVhZGVyJztcbmltcG9ydCB7IGNyZWF0ZUVycnJvckZpZWxkVHlwZU1pc21hdGNoIH0gZnJvbSAnLi4vZXJyb3InO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHZhbGlkYXRvcnM6IHtcbiAgICBjb250ZW50VHlwZSgpIHtcbiAgICAgIHJldHVybiAobm9kZSwgY3R4KSA9PiB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuY29udGVudFR5cGUgJiYgdHlwZW9mIG5vZGUuY29udGVudFR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycnJvckZpZWxkVHlwZU1pc21hdGNoKCdzdHJpbmcnLCBub2RlLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIHN0eWxlKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5zdHlsZSAmJiB0eXBlb2Ygbm9kZS5zdHlsZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRXJycm9yRmllbGRUeXBlTWlzbWF0Y2goJ3N0cmluZycsIG5vZGUsIGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgZXhwbG9kZSgpIHtcbiAgICAgIHJldHVybiAobm9kZSwgY3R4KSA9PiB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZXhwbG9kZSAmJiB0eXBlb2Ygbm9kZS5leHBsb2RlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRXJycm9yRmllbGRUeXBlTWlzbWF0Y2goJ2Jvb2xlYW4nLCBub2RlLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGFsbG93UmVzZXJ2ZWQoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmFsbG93UmVzZXJ2ZWQgJiYgdHlwZW9mIG5vZGUuYWxsb3dSZXNlcnZlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycnJvckZpZWxkVHlwZU1pc21hdGNoKCdib29sZWFuJywgbm9kZSwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcbiAgcHJvcGVydGllczoge1xuICAgIGhlYWRlcnM6IE9wZW5BUElIZWFkZXJNYXAsXG4gIH0sXG59O1xuIl19