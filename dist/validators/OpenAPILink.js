"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenAPILinkMap = exports.OpenAPILink = void 0;

var _error = require("../error");

var _OpenAPIServer = _interopRequireDefault(require("./OpenAPIServer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const OpenAPILink = {
  validators: {
    operationRef() {
      return (node, ctx) => {
        if (!node || !node.operationRef) return null;
        if (node.operationRef && node.operationId) return (0, _error.createErrorMutuallyExclusiveFields)(['operationRef', 'operationId'], node, ctx);
        if (typeof node.operationRef !== 'string') return (0, _error.createErrrorFieldTypeMismatch)('string', node, ctx);
        return null;
      };
    },

    operationId() {
      return (node, ctx) => {
        if (!node || !node.operationId) return null;
        if (node.operationRef && node.operationId) return (0, _error.createErrorMutuallyExclusiveFields)(['operationId', 'operationRef'], node, ctx);
        if (typeof node.operationId !== 'string') return (0, _error.createErrrorFieldTypeMismatch)('string', node, ctx);
        return null;
      };
    },

    parameters() {
      return (node, ctx) => {
        if (!node || !node.parameters) return null;

        if (Object.keys(node.parameters).filter(key => typeof key !== 'string').length > 0) {
          return (0, _error.createErrrorFieldTypeMismatch)('Map[string, any]', node, ctx);
        }

        return null;
      };
    },

    description() {
      return (node, ctx) => {
        if (!node || !node.description) return null;

        if (typeof node.description !== 'string') {
          return (0, _error.createErrrorFieldTypeMismatch)('string', node, ctx);
        }

        return null;
      };
    },

    requestBody() {
      return () => null;
    }

  },
  properties: {
    server: _OpenAPIServer.default
  }
};
exports.OpenAPILink = OpenAPILink;
const OpenAPILinkMap = {
  properties(node) {
    const props = {};
    Object.keys(node).forEach(k => {
      props[k] = OpenAPILink;
    });
    return props;
  }

};
exports.OpenAPILinkMap = OpenAPILinkMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWxpZGF0b3JzL09wZW5BUElMaW5rLmpzIl0sIm5hbWVzIjpbIk9wZW5BUElMaW5rIiwidmFsaWRhdG9ycyIsIm9wZXJhdGlvblJlZiIsIm5vZGUiLCJjdHgiLCJvcGVyYXRpb25JZCIsInBhcmFtZXRlcnMiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwibGVuZ3RoIiwiZGVzY3JpcHRpb24iLCJyZXF1ZXN0Qm9keSIsInByb3BlcnRpZXMiLCJzZXJ2ZXIiLCJPcGVuQVBJU2VydmVyIiwiT3BlbkFQSUxpbmtNYXAiLCJwcm9wcyIsImZvckVhY2giLCJrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFTyxNQUFNQSxXQUFXLEdBQUc7QUFDekJDLEVBQUFBLFVBQVUsRUFBRTtBQUNWQyxJQUFBQSxZQUFZLEdBQUc7QUFDYixhQUFPLENBQUNDLElBQUQsRUFBT0MsR0FBUCxLQUFlO0FBQ3BCLFlBQUksQ0FBQ0QsSUFBRCxJQUFTLENBQUNBLElBQUksQ0FBQ0QsWUFBbkIsRUFBaUMsT0FBTyxJQUFQO0FBQ2pDLFlBQUlDLElBQUksQ0FBQ0QsWUFBTCxJQUFxQkMsSUFBSSxDQUFDRSxXQUE5QixFQUEyQyxPQUFPLCtDQUFtQyxDQUFDLGNBQUQsRUFBaUIsYUFBakIsQ0FBbkMsRUFBb0VGLElBQXBFLEVBQTBFQyxHQUExRSxDQUFQO0FBQzNDLFlBQUksT0FBT0QsSUFBSSxDQUFDRCxZQUFaLEtBQTZCLFFBQWpDLEVBQTJDLE9BQU8sMENBQThCLFFBQTlCLEVBQXdDQyxJQUF4QyxFQUE4Q0MsR0FBOUMsQ0FBUDtBQUMzQyxlQUFPLElBQVA7QUFDRCxPQUxEO0FBTUQsS0FSUzs7QUFTVkMsSUFBQUEsV0FBVyxHQUFHO0FBQ1osYUFBTyxDQUFDRixJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNwQixZQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNFLFdBQW5CLEVBQWdDLE9BQU8sSUFBUDtBQUNoQyxZQUFJRixJQUFJLENBQUNELFlBQUwsSUFBcUJDLElBQUksQ0FBQ0UsV0FBOUIsRUFBMkMsT0FBTywrQ0FBbUMsQ0FBQyxhQUFELEVBQWdCLGNBQWhCLENBQW5DLEVBQW9FRixJQUFwRSxFQUEwRUMsR0FBMUUsQ0FBUDtBQUMzQyxZQUFJLE9BQU9ELElBQUksQ0FBQ0UsV0FBWixLQUE0QixRQUFoQyxFQUEwQyxPQUFPLDBDQUE4QixRQUE5QixFQUF3Q0YsSUFBeEMsRUFBOENDLEdBQTlDLENBQVA7QUFDMUMsZUFBTyxJQUFQO0FBQ0QsT0FMRDtBQU1ELEtBaEJTOztBQWlCVkUsSUFBQUEsVUFBVSxHQUFHO0FBQ1gsYUFBTyxDQUFDSCxJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNwQixZQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNHLFVBQW5CLEVBQStCLE9BQU8sSUFBUDs7QUFDL0IsWUFBSUMsTUFBTSxDQUFDQyxJQUFQLENBQVlMLElBQUksQ0FBQ0csVUFBakIsRUFBNkJHLE1BQTdCLENBQXFDQyxHQUFELElBQVMsT0FBT0EsR0FBUCxLQUFlLFFBQTVELEVBQXNFQyxNQUF0RSxHQUErRSxDQUFuRixFQUFzRjtBQUNwRixpQkFBTywwQ0FBOEIsa0JBQTlCLEVBQWtEUixJQUFsRCxFQUF3REMsR0FBeEQsQ0FBUDtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNELE9BTkQ7QUFPRCxLQXpCUzs7QUEwQlZRLElBQUFBLFdBQVcsR0FBRztBQUNaLGFBQU8sQ0FBQ1QsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDUyxXQUFuQixFQUFnQyxPQUFPLElBQVA7O0FBQ2hDLFlBQUksT0FBT1QsSUFBSSxDQUFDUyxXQUFaLEtBQTRCLFFBQWhDLEVBQTBDO0FBQ3hDLGlCQUFPLDBDQUE4QixRQUE5QixFQUF3Q1QsSUFBeEMsRUFBOENDLEdBQTlDLENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRCxPQU5EO0FBT0QsS0FsQ1M7O0FBbUNWUyxJQUFBQSxXQUFXLEdBQUc7QUFDWixhQUFPLE1BQU0sSUFBYjtBQUNEOztBQXJDUyxHQURhO0FBd0N6QkMsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLE1BQU0sRUFBRUM7QUFERTtBQXhDYSxDQUFwQjs7QUE2Q0EsTUFBTUMsY0FBYyxHQUFHO0FBQzVCSCxFQUFBQSxVQUFVLENBQUNYLElBQUQsRUFBTztBQUNmLFVBQU1lLEtBQUssR0FBRyxFQUFkO0FBQ0FYLElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTCxJQUFaLEVBQWtCZ0IsT0FBbEIsQ0FBMkJDLENBQUQsSUFBTztBQUMvQkYsTUFBQUEsS0FBSyxDQUFDRSxDQUFELENBQUwsR0FBV3BCLFdBQVg7QUFDRCxLQUZEO0FBR0EsV0FBT2tCLEtBQVA7QUFDRDs7QUFQMkIsQ0FBdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVFcnJvck11dHVhbGx5RXhjbHVzaXZlRmllbGRzLCBjcmVhdGVFcnJyb3JGaWVsZFR5cGVNaXNtYXRjaCB9IGZyb20gJy4uL2Vycm9yJztcbmltcG9ydCBPcGVuQVBJU2VydmVyIGZyb20gJy4vT3BlbkFQSVNlcnZlcic7XG5cbmV4cG9ydCBjb25zdCBPcGVuQVBJTGluayA9IHtcbiAgdmFsaWRhdG9yczoge1xuICAgIG9wZXJhdGlvblJlZigpIHtcbiAgICAgIHJldHVybiAobm9kZSwgY3R4KSA9PiB7XG4gICAgICAgIGlmICghbm9kZSB8fCAhbm9kZS5vcGVyYXRpb25SZWYpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAobm9kZS5vcGVyYXRpb25SZWYgJiYgbm9kZS5vcGVyYXRpb25JZCkgcmV0dXJuIGNyZWF0ZUVycm9yTXV0dWFsbHlFeGNsdXNpdmVGaWVsZHMoWydvcGVyYXRpb25SZWYnLCAnb3BlcmF0aW9uSWQnXSwgbm9kZSwgY3R4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLm9wZXJhdGlvblJlZiAhPT0gJ3N0cmluZycpIHJldHVybiBjcmVhdGVFcnJyb3JGaWVsZFR5cGVNaXNtYXRjaCgnc3RyaW5nJywgbm9kZSwgY3R4KTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgb3BlcmF0aW9uSWQoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAoIW5vZGUgfHwgIW5vZGUub3BlcmF0aW9uSWQpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAobm9kZS5vcGVyYXRpb25SZWYgJiYgbm9kZS5vcGVyYXRpb25JZCkgcmV0dXJuIGNyZWF0ZUVycm9yTXV0dWFsbHlFeGNsdXNpdmVGaWVsZHMoWydvcGVyYXRpb25JZCcsICdvcGVyYXRpb25SZWYnXSwgbm9kZSwgY3R4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLm9wZXJhdGlvbklkICE9PSAnc3RyaW5nJykgcmV0dXJuIGNyZWF0ZUVycnJvckZpZWxkVHlwZU1pc21hdGNoKCdzdHJpbmcnLCBub2RlLCBjdHgpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBwYXJhbWV0ZXJzKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLnBhcmFtZXRlcnMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMobm9kZS5wYXJhbWV0ZXJzKS5maWx0ZXIoKGtleSkgPT4gdHlwZW9mIGtleSAhPT0gJ3N0cmluZycpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRXJycm9yRmllbGRUeXBlTWlzbWF0Y2goJ01hcFtzdHJpbmcsIGFueV0nLCBub2RlLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLmRlc2NyaXB0aW9uKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLmRlc2NyaXB0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFcnJyb3JGaWVsZFR5cGVNaXNtYXRjaCgnc3RyaW5nJywgbm9kZSwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICByZXF1ZXN0Qm9keSgpIHtcbiAgICAgIHJldHVybiAoKSA9PiBudWxsO1xuICAgIH0sXG4gIH0sXG4gIHByb3BlcnRpZXM6IHtcbiAgICBzZXJ2ZXI6IE9wZW5BUElTZXJ2ZXIsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgT3BlbkFQSUxpbmtNYXAgPSB7XG4gIHByb3BlcnRpZXMobm9kZSkge1xuICAgIGNvbnN0IHByb3BzID0ge307XG4gICAgT2JqZWN0LmtleXMobm9kZSkuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgcHJvcHNba10gPSBPcGVuQVBJTGluaztcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0sXG59O1xuIl19