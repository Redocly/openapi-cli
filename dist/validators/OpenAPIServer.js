"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _error = _interopRequireDefault(require("../error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const OpenAPIServerVariable = {
  validators: {
    default() {
      return (node, ctx) => {
        if (!node || !node.default) return (0, _error.default)('The default field is required for the Server Variable', node, ctx);
        if (typeof node.default !== 'string') return (0, _error.default)('default field of the Server Variable must be a string', node, ctx);
        return null;
      };
    },

    description() {
      return (node, ctx) => node && node.description && typeof node.description !== 'string' ? (0, _error.default)('description field of the Server Variable object must be a string', node, ctx) : null;
    },

    enum() {
      return (node, ctx) => {
        if (node && node.enum) {
          if (!Array.isArray(node.enum)) return (0, _error.default)('Value of enum must be an array', node, ctx);
          if (node.type && node.enum.filter(item => typeof item !== 'string').length !== 0) return (0, _error.default)('All values of "enum" field must be strings', node, ctx);
        }

        return null;
      };
    }

  }
};
const OpenAPIServerVariableMap = {
  properties(node) {
    const props = {};
    Object.keys(node).forEach(k => {
      props[k] = OpenAPIServerVariable;
    });
    return props;
  }

};
const OpenAPIServer = {
  validators: {
    url() {
      return (node, ctx) => {
        if (!node || !node.url || typeof node.url !== 'string') return (0, _error.default)('url is required for a server object and must be a string', node, ctx);
        return null;
      };
    },

    description() {
      return (node, ctx) => node && node.description && typeof node.description !== 'string' ? (0, _error.default)('description field of the Server object must be a string', node, ctx) : null;
    }

  },
  properties: {
    variables() {
      return OpenAPIServerVariableMap;
    }

  }
};
var _default = OpenAPIServer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWxpZGF0b3JzL09wZW5BUElTZXJ2ZXIuanMiXSwibmFtZXMiOlsiT3BlbkFQSVNlcnZlclZhcmlhYmxlIiwidmFsaWRhdG9ycyIsImRlZmF1bHQiLCJub2RlIiwiY3R4IiwiZGVzY3JpcHRpb24iLCJlbnVtIiwiQXJyYXkiLCJpc0FycmF5IiwidHlwZSIsImZpbHRlciIsIml0ZW0iLCJsZW5ndGgiLCJPcGVuQVBJU2VydmVyVmFyaWFibGVNYXAiLCJwcm9wZXJ0aWVzIiwicHJvcHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImsiLCJPcGVuQVBJU2VydmVyIiwidXJsIiwidmFyaWFibGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFQSxNQUFNQSxxQkFBcUIsR0FBRztBQUM1QkMsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLE9BQU8sR0FBRztBQUNSLGFBQU8sQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDRCxPQUFuQixFQUE0QixPQUFPLG9CQUFZLHVEQUFaLEVBQXFFQyxJQUFyRSxFQUEyRUMsR0FBM0UsQ0FBUDtBQUM1QixZQUFJLE9BQU9ELElBQUksQ0FBQ0QsT0FBWixLQUF3QixRQUE1QixFQUFzQyxPQUFPLG9CQUFZLHVEQUFaLEVBQXFFQyxJQUFyRSxFQUEyRUMsR0FBM0UsQ0FBUDtBQUN0QyxlQUFPLElBQVA7QUFDRCxPQUpEO0FBS0QsS0FQUzs7QUFRVkMsSUFBQUEsV0FBVyxHQUFHO0FBQ1osYUFBTyxDQUFDRixJQUFELEVBQU9DLEdBQVAsS0FBZ0JELElBQUksSUFBSUEsSUFBSSxDQUFDRSxXQUFiLElBQTRCLE9BQU9GLElBQUksQ0FBQ0UsV0FBWixLQUE0QixRQUF4RCxHQUNuQixvQkFBWSxrRUFBWixFQUFnRkYsSUFBaEYsRUFBc0ZDLEdBQXRGLENBRG1CLEdBQzBFLElBRGpHO0FBRUQsS0FYUzs7QUFZVkUsSUFBQUEsSUFBSSxHQUFHO0FBQ0wsYUFBTyxDQUFDSCxJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNwQixZQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ0csSUFBakIsRUFBdUI7QUFDckIsY0FBSSxDQUFDQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0wsSUFBSSxDQUFDRyxJQUFuQixDQUFMLEVBQStCLE9BQU8sb0JBQVksZ0NBQVosRUFBOENILElBQTlDLEVBQW9EQyxHQUFwRCxDQUFQO0FBQy9CLGNBQUlELElBQUksQ0FBQ00sSUFBTCxJQUFhTixJQUFJLENBQUNHLElBQUwsQ0FBVUksTUFBVixDQUFrQkMsSUFBRCxJQUFVLE9BQU9BLElBQVAsS0FBZ0IsUUFBM0MsRUFBcURDLE1BQXJELEtBQWdFLENBQWpGLEVBQW9GLE9BQU8sb0JBQVksNENBQVosRUFBMERULElBQTFELEVBQWdFQyxHQUFoRSxDQUFQO0FBQ3JGOztBQUNELGVBQU8sSUFBUDtBQUNELE9BTkQ7QUFPRDs7QUFwQlM7QUFEZ0IsQ0FBOUI7QUF5QkEsTUFBTVMsd0JBQXdCLEdBQUc7QUFDL0JDLEVBQUFBLFVBQVUsQ0FBQ1gsSUFBRCxFQUFPO0FBQ2YsVUFBTVksS0FBSyxHQUFHLEVBQWQ7QUFDQUMsSUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlkLElBQVosRUFBa0JlLE9BQWxCLENBQTJCQyxDQUFELElBQU87QUFDL0JKLE1BQUFBLEtBQUssQ0FBQ0ksQ0FBRCxDQUFMLEdBQVduQixxQkFBWDtBQUNELEtBRkQ7QUFHQSxXQUFPZSxLQUFQO0FBQ0Q7O0FBUDhCLENBQWpDO0FBVUEsTUFBTUssYUFBYSxHQUFHO0FBQ3BCbkIsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZvQixJQUFBQSxHQUFHLEdBQUc7QUFDSixhQUFPLENBQUNsQixJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNwQixZQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNrQixHQUFmLElBQXNCLE9BQU9sQixJQUFJLENBQUNrQixHQUFaLEtBQW9CLFFBQTlDLEVBQXdELE9BQU8sb0JBQVksMERBQVosRUFBd0VsQixJQUF4RSxFQUE4RUMsR0FBOUUsQ0FBUDtBQUN4RCxlQUFPLElBQVA7QUFDRCxPQUhEO0FBSUQsS0FOUzs7QUFPVkMsSUFBQUEsV0FBVyxHQUFHO0FBQ1osYUFBTyxDQUFDRixJQUFELEVBQU9DLEdBQVAsS0FBZ0JELElBQUksSUFBSUEsSUFBSSxDQUFDRSxXQUFiLElBQTRCLE9BQU9GLElBQUksQ0FBQ0UsV0FBWixLQUE0QixRQUF4RCxHQUNuQixvQkFBWSx5REFBWixFQUF1RUYsSUFBdkUsRUFBNkVDLEdBQTdFLENBRG1CLEdBQ2lFLElBRHhGO0FBRUQ7O0FBVlMsR0FEUTtBQWFwQlUsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZRLElBQUFBLFNBQVMsR0FBRztBQUNWLGFBQU9ULHdCQUFQO0FBQ0Q7O0FBSFM7QUFiUSxDQUF0QjtlQW9CZU8sYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVFcnJvciBmcm9tICcuLi9lcnJvcic7XG5cbmNvbnN0IE9wZW5BUElTZXJ2ZXJWYXJpYWJsZSA9IHtcbiAgdmFsaWRhdG9yczoge1xuICAgIGRlZmF1bHQoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAoIW5vZGUgfHwgIW5vZGUuZGVmYXVsdCkgcmV0dXJuIGNyZWF0ZUVycm9yKCdUaGUgZGVmYXVsdCBmaWVsZCBpcyByZXF1aXJlZCBmb3IgdGhlIFNlcnZlciBWYXJpYWJsZScsIG5vZGUsIGN0eCk7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZS5kZWZhdWx0ICE9PSAnc3RyaW5nJykgcmV0dXJuIGNyZWF0ZUVycm9yKCdkZWZhdWx0IGZpZWxkIG9mIHRoZSBTZXJ2ZXIgVmFyaWFibGUgbXVzdCBiZSBhIHN0cmluZycsIG5vZGUsIGN0eCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IChub2RlICYmIG5vZGUuZGVzY3JpcHRpb24gJiYgdHlwZW9mIG5vZGUuZGVzY3JpcHRpb24gIT09ICdzdHJpbmcnXG4gICAgICAgID8gY3JlYXRlRXJyb3IoJ2Rlc2NyaXB0aW9uIGZpZWxkIG9mIHRoZSBTZXJ2ZXIgVmFyaWFibGUgb2JqZWN0IG11c3QgYmUgYSBzdHJpbmcnLCBub2RlLCBjdHgpIDogbnVsbCk7XG4gICAgfSxcbiAgICBlbnVtKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5lbnVtKSB7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGUuZW51bSkpIHJldHVybiBjcmVhdGVFcnJvcignVmFsdWUgb2YgZW51bSBtdXN0IGJlIGFuIGFycmF5Jywgbm9kZSwgY3R4KTtcbiAgICAgICAgICBpZiAobm9kZS50eXBlICYmIG5vZGUuZW51bS5maWx0ZXIoKGl0ZW0pID0+IHR5cGVvZiBpdGVtICE9PSAnc3RyaW5nJykubGVuZ3RoICE9PSAwKSByZXR1cm4gY3JlYXRlRXJyb3IoJ0FsbCB2YWx1ZXMgb2YgXCJlbnVtXCIgZmllbGQgbXVzdCBiZSBzdHJpbmdzJywgbm9kZSwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IE9wZW5BUElTZXJ2ZXJWYXJpYWJsZU1hcCA9IHtcbiAgcHJvcGVydGllcyhub2RlKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhub2RlKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICBwcm9wc1trXSA9IE9wZW5BUElTZXJ2ZXJWYXJpYWJsZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0sXG59O1xuXG5jb25zdCBPcGVuQVBJU2VydmVyID0ge1xuICB2YWxpZGF0b3JzOiB7XG4gICAgdXJsKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLnVybCB8fCB0eXBlb2Ygbm9kZS51cmwgIT09ICdzdHJpbmcnKSByZXR1cm4gY3JlYXRlRXJyb3IoJ3VybCBpcyByZXF1aXJlZCBmb3IgYSBzZXJ2ZXIgb2JqZWN0IGFuZCBtdXN0IGJlIGEgc3RyaW5nJywgbm9kZSwgY3R4KTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgZGVzY3JpcHRpb24oKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4gKG5vZGUgJiYgbm9kZS5kZXNjcmlwdGlvbiAmJiB0eXBlb2Ygbm9kZS5kZXNjcmlwdGlvbiAhPT0gJ3N0cmluZydcbiAgICAgICAgPyBjcmVhdGVFcnJvcignZGVzY3JpcHRpb24gZmllbGQgb2YgdGhlIFNlcnZlciBvYmplY3QgbXVzdCBiZSBhIHN0cmluZycsIG5vZGUsIGN0eCkgOiBudWxsKTtcbiAgICB9LFxuICB9LFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgdmFyaWFibGVzKCkge1xuICAgICAgcmV0dXJuIE9wZW5BUElTZXJ2ZXJWYXJpYWJsZU1hcDtcbiAgICB9LFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgT3BlbkFQSVNlcnZlcjtcbiJdfQ==