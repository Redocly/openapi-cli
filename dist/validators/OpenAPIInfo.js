"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenAPIInfo = exports.OpenAPIContact = exports.OpenAPILicense = void 0;

var _error = _interopRequireDefault(require("../error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const OpenAPILicense = {
  validators: {
    name() {
      return (node, ctx) => !node || !node.name ? (0, _error.default)('Name is required for the license object', node, ctx, 'key') : null;
    },

    url() {
      return () => null;
    }

  }
};
exports.OpenAPILicense = OpenAPILicense;
const OpenAPIContact = {
  validators: {
    name() {
      return (node, ctx) => node && node.name && typeof node.name !== 'string' ? (0, _error.default)('Name must be a string', node, ctx) : null;
    },

    url() {
      return (node, ctx) => node && node.url && typeof node.url !== 'string' ? (0, _error.default)('Url must be a string', node, ctx) : null;
    },

    email() {
      return (node, ctx) => node && node.url && typeof node.url !== 'string' ? (0, _error.default)('Email must be a string', node, ctx) : null;
    }

  }
};
exports.OpenAPIContact = OpenAPIContact;
const OpenAPIInfo = {
  validators: {
    title() {
      return (node, ctx) => !node || !node.title ? (0, _error.default)('Info section must include title', node, ctx, 'key') : null;
    },

    version() {
      return (node, ctx) => !node || !node.version ? (0, _error.default)('Version is required for the info section', node, ctx, 'key') : null;
    },

    description() {
      return () => null;
    },

    termsOfService() {
      return () => null;
    }

  },
  properties: {
    license: OpenAPILicense,
    contact: OpenAPIContact
  }
};
exports.OpenAPIInfo = OpenAPIInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWxpZGF0b3JzL09wZW5BUElJbmZvLmpzIl0sIm5hbWVzIjpbIk9wZW5BUElMaWNlbnNlIiwidmFsaWRhdG9ycyIsIm5hbWUiLCJub2RlIiwiY3R4IiwidXJsIiwiT3BlbkFQSUNvbnRhY3QiLCJlbWFpbCIsIk9wZW5BUElJbmZvIiwidGl0bGUiLCJ2ZXJzaW9uIiwiZGVzY3JpcHRpb24iLCJ0ZXJtc09mU2VydmljZSIsInByb3BlcnRpZXMiLCJsaWNlbnNlIiwiY29udGFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRU8sTUFBTUEsY0FBYyxHQUFHO0FBQzVCQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsSUFBSSxHQUFHO0FBQ0wsYUFBTyxDQUFDQyxJQUFELEVBQU9DLEdBQVAsS0FBZ0IsQ0FBQ0QsSUFBRCxJQUFTLENBQUNBLElBQUksQ0FBQ0QsSUFBZixHQUFzQixvQkFBWSx5Q0FBWixFQUF1REMsSUFBdkQsRUFBNkRDLEdBQTdELEVBQWtFLEtBQWxFLENBQXRCLEdBQWlHLElBQXhIO0FBQ0QsS0FIUzs7QUFJVkMsSUFBQUEsR0FBRyxHQUFHO0FBQ0osYUFBTyxNQUFNLElBQWI7QUFDRDs7QUFOUztBQURnQixDQUF2Qjs7QUFXQSxNQUFNQyxjQUFjLEdBQUc7QUFDNUJMLEVBQUFBLFVBQVUsRUFBRTtBQUNWQyxJQUFBQSxJQUFJLEdBQUc7QUFDTCxhQUFPLENBQUNDLElBQUQsRUFBT0MsR0FBUCxLQUFpQkQsSUFBSSxJQUFJQSxJQUFJLENBQUNELElBQWQsSUFBdUIsT0FBT0MsSUFBSSxDQUFDRCxJQUFaLEtBQXFCLFFBQTVDLEdBQXVELG9CQUFZLHVCQUFaLEVBQXFDQyxJQUFyQyxFQUEyQ0MsR0FBM0MsQ0FBdkQsR0FBeUcsSUFBaEk7QUFDRCxLQUhTOztBQUlWQyxJQUFBQSxHQUFHLEdBQUc7QUFDSixhQUFPLENBQUNGLElBQUQsRUFBT0MsR0FBUCxLQUFpQkQsSUFBSSxJQUFJQSxJQUFJLENBQUNFLEdBQWQsSUFBc0IsT0FBT0YsSUFBSSxDQUFDRSxHQUFaLEtBQW9CLFFBQTFDLEdBQXFELG9CQUFZLHNCQUFaLEVBQW9DRixJQUFwQyxFQUEwQ0MsR0FBMUMsQ0FBckQsR0FBc0csSUFBN0g7QUFDRCxLQU5TOztBQU9WRyxJQUFBQSxLQUFLLEdBQUc7QUFDTixhQUFPLENBQUNKLElBQUQsRUFBT0MsR0FBUCxLQUFpQkQsSUFBSSxJQUFJQSxJQUFJLENBQUNFLEdBQWQsSUFBc0IsT0FBT0YsSUFBSSxDQUFDRSxHQUFaLEtBQW9CLFFBQTFDLEdBQXFELG9CQUFZLHdCQUFaLEVBQXNDRixJQUF0QyxFQUE0Q0MsR0FBNUMsQ0FBckQsR0FBd0csSUFBL0g7QUFDRDs7QUFUUztBQURnQixDQUF2Qjs7QUFjQSxNQUFNSSxXQUFXLEdBQUc7QUFDekJQLEVBQUFBLFVBQVUsRUFBRTtBQUNWUSxJQUFBQSxLQUFLLEdBQUc7QUFDTixhQUFPLENBQUNOLElBQUQsRUFBT0MsR0FBUCxLQUFnQixDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDTSxLQUFmLEdBQXVCLG9CQUFZLGlDQUFaLEVBQStDTixJQUEvQyxFQUFxREMsR0FBckQsRUFBMEQsS0FBMUQsQ0FBdkIsR0FBMEYsSUFBakg7QUFDRCxLQUhTOztBQUlWTSxJQUFBQSxPQUFPLEdBQUc7QUFDUixhQUFPLENBQUNQLElBQUQsRUFBT0MsR0FBUCxLQUFnQixDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDTyxPQUFmLEdBQXlCLG9CQUFZLDBDQUFaLEVBQXdEUCxJQUF4RCxFQUE4REMsR0FBOUQsRUFBbUUsS0FBbkUsQ0FBekIsR0FBcUcsSUFBNUg7QUFDRCxLQU5TOztBQU9WTyxJQUFBQSxXQUFXLEdBQUc7QUFDWixhQUFPLE1BQU0sSUFBYjtBQUNELEtBVFM7O0FBVVZDLElBQUFBLGNBQWMsR0FBRztBQUNmLGFBQU8sTUFBTSxJQUFiO0FBQ0Q7O0FBWlMsR0FEYTtBQWV6QkMsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLE9BQU8sRUFBRWQsY0FEQztBQUVWZSxJQUFBQSxPQUFPLEVBQUVUO0FBRkM7QUFmYSxDQUFwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVFcnJvciBmcm9tICcuLi9lcnJvcic7XG5cbmV4cG9ydCBjb25zdCBPcGVuQVBJTGljZW5zZSA9IHtcbiAgdmFsaWRhdG9yczoge1xuICAgIG5hbWUoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4gKCFub2RlIHx8ICFub2RlLm5hbWUgPyBjcmVhdGVFcnJvcignTmFtZSBpcyByZXF1aXJlZCBmb3IgdGhlIGxpY2Vuc2Ugb2JqZWN0Jywgbm9kZSwgY3R4LCAna2V5JykgOiBudWxsKTtcbiAgICB9LFxuICAgIHVybCgpIHtcbiAgICAgIHJldHVybiAoKSA9PiBudWxsO1xuICAgIH0sXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgT3BlbkFQSUNvbnRhY3QgPSB7XG4gIHZhbGlkYXRvcnM6IHtcbiAgICBuYW1lKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+ICgobm9kZSAmJiBub2RlLm5hbWUpICYmIHR5cGVvZiBub2RlLm5hbWUgIT09ICdzdHJpbmcnID8gY3JlYXRlRXJyb3IoJ05hbWUgbXVzdCBiZSBhIHN0cmluZycsIG5vZGUsIGN0eCkgOiBudWxsKTtcbiAgICB9LFxuICAgIHVybCgpIHtcbiAgICAgIHJldHVybiAobm9kZSwgY3R4KSA9PiAoKG5vZGUgJiYgbm9kZS51cmwpICYmIHR5cGVvZiBub2RlLnVybCAhPT0gJ3N0cmluZycgPyBjcmVhdGVFcnJvcignVXJsIG11c3QgYmUgYSBzdHJpbmcnLCBub2RlLCBjdHgpIDogbnVsbCk7XG4gICAgfSxcbiAgICBlbWFpbCgpIHtcbiAgICAgIHJldHVybiAobm9kZSwgY3R4KSA9PiAoKG5vZGUgJiYgbm9kZS51cmwpICYmIHR5cGVvZiBub2RlLnVybCAhPT0gJ3N0cmluZycgPyBjcmVhdGVFcnJvcignRW1haWwgbXVzdCBiZSBhIHN0cmluZycsIG5vZGUsIGN0eCkgOiBudWxsKTtcbiAgICB9LFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IE9wZW5BUElJbmZvID0ge1xuICB2YWxpZGF0b3JzOiB7XG4gICAgdGl0bGUoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4gKCFub2RlIHx8ICFub2RlLnRpdGxlID8gY3JlYXRlRXJyb3IoJ0luZm8gc2VjdGlvbiBtdXN0IGluY2x1ZGUgdGl0bGUnLCBub2RlLCBjdHgsICdrZXknKSA6IG51bGwpO1xuICAgIH0sXG4gICAgdmVyc2lvbigpIHtcbiAgICAgIHJldHVybiAobm9kZSwgY3R4KSA9PiAoIW5vZGUgfHwgIW5vZGUudmVyc2lvbiA/IGNyZWF0ZUVycm9yKCdWZXJzaW9uIGlzIHJlcXVpcmVkIGZvciB0aGUgaW5mbyBzZWN0aW9uJywgbm9kZSwgY3R4LCAna2V5JykgOiBudWxsKTtcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uKCkge1xuICAgICAgcmV0dXJuICgpID0+IG51bGw7XG4gICAgfSxcbiAgICB0ZXJtc09mU2VydmljZSgpIHtcbiAgICAgIHJldHVybiAoKSA9PiBudWxsO1xuICAgIH0sXG4gIH0sXG4gIHByb3BlcnRpZXM6IHtcbiAgICBsaWNlbnNlOiBPcGVuQVBJTGljZW5zZSxcbiAgICBjb250YWN0OiBPcGVuQVBJQ29udGFjdCxcbiAgfSxcbn07XG4iXX0=