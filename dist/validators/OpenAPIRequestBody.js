"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenAPIRequestBodyMap = exports.OpenAPIRequestBody = void 0;

var _error = require("../error");

var _OpenAPIMediaObject = require("./OpenAPIMediaObject");

const OpenAPIRequestBody = {
  validators: {
    description() {
      return (node, ctx) => {
        if (node && node.description && typeof node.description !== 'string') {
          return (0, _error.createErrrorFieldTypeMismatch)('string.', node, ctx);
        }

        return null;
      };
    },

    content() {
      return (node, ctx) => {
        if (node && !node.content) {
          return (0, _error.createErrorMissingRequiredField)('content', node, ctx);
        }

        return null;
      };
    },

    required() {
      return (node, ctx) => {
        if (node && node.required && typeof node.required !== 'boolean') {
          return (0, _error.createErrrorFieldTypeMismatch)('boolean.', node, ctx);
        }

        return null;
      };
    }

  },
  properties: {
    content: _OpenAPIMediaObject.OpenAPIMediaTypeObject
  }
};
exports.OpenAPIRequestBody = OpenAPIRequestBody;
const OpenAPIRequestBodyMap = {
  properties(node) {
    const props = {};
    Object.keys(node).forEach(k => {
      props[k] = OpenAPIRequestBody;
    });
    return props;
  }

};
exports.OpenAPIRequestBodyMap = OpenAPIRequestBodyMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWxpZGF0b3JzL09wZW5BUElSZXF1ZXN0Qm9keS5qcyJdLCJuYW1lcyI6WyJPcGVuQVBJUmVxdWVzdEJvZHkiLCJ2YWxpZGF0b3JzIiwiZGVzY3JpcHRpb24iLCJub2RlIiwiY3R4IiwiY29udGVudCIsInJlcXVpcmVkIiwicHJvcGVydGllcyIsIk9wZW5BUElNZWRpYVR5cGVPYmplY3QiLCJPcGVuQVBJUmVxdWVzdEJvZHlNYXAiLCJwcm9wcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiayJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVPLE1BQU1BLGtCQUFrQixHQUFHO0FBQ2hDQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsV0FBVyxHQUFHO0FBQ1osYUFBTyxDQUFDQyxJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNwQixZQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ0QsV0FBYixJQUE0QixPQUFPQyxJQUFJLENBQUNELFdBQVosS0FBNEIsUUFBNUQsRUFBc0U7QUFDcEUsaUJBQU8sMENBQThCLFNBQTlCLEVBQXlDQyxJQUF6QyxFQUErQ0MsR0FBL0MsQ0FBUDtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNELE9BTEQ7QUFNRCxLQVJTOztBQVNWQyxJQUFBQSxPQUFPLEdBQUc7QUFDUixhQUFPLENBQUNGLElBQUQsRUFBT0MsR0FBUCxLQUFlO0FBQ3BCLFlBQUlELElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUNFLE9BQWxCLEVBQTJCO0FBQ3pCLGlCQUFPLDRDQUFnQyxTQUFoQyxFQUEyQ0YsSUFBM0MsRUFBaURDLEdBQWpELENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRCxPQUxEO0FBTUQsS0FoQlM7O0FBaUJWRSxJQUFBQSxRQUFRLEdBQUc7QUFDVCxhQUFPLENBQUNILElBQUQsRUFBT0MsR0FBUCxLQUFlO0FBQ3BCLFlBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDRyxRQUFiLElBQXlCLE9BQU9ILElBQUksQ0FBQ0csUUFBWixLQUF5QixTQUF0RCxFQUFpRTtBQUMvRCxpQkFBTywwQ0FBOEIsVUFBOUIsRUFBMENILElBQTFDLEVBQWdEQyxHQUFoRCxDQUFQO0FBQ0Q7O0FBQ0QsZUFBTyxJQUFQO0FBQ0QsT0FMRDtBQU1EOztBQXhCUyxHQURvQjtBQTJCaENHLEVBQUFBLFVBQVUsRUFBRTtBQUNWRixJQUFBQSxPQUFPLEVBQUVHO0FBREM7QUEzQm9CLENBQTNCOztBQWdDQSxNQUFNQyxxQkFBcUIsR0FBRztBQUNuQ0YsRUFBQUEsVUFBVSxDQUFDSixJQUFELEVBQU87QUFDZixVQUFNTyxLQUFLLEdBQUcsRUFBZDtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWVQsSUFBWixFQUFrQlUsT0FBbEIsQ0FBMkJDLENBQUQsSUFBTztBQUMvQkosTUFBQUEsS0FBSyxDQUFDSSxDQUFELENBQUwsR0FBV2Qsa0JBQVg7QUFDRCxLQUZEO0FBR0EsV0FBT1UsS0FBUDtBQUNEOztBQVBrQyxDQUE5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUVycnJvckZpZWxkVHlwZU1pc21hdGNoLCBjcmVhdGVFcnJvck1pc3NpbmdSZXF1aXJlZEZpZWxkIH0gZnJvbSAnLi4vZXJyb3InO1xuaW1wb3J0IHsgT3BlbkFQSU1lZGlhVHlwZU9iamVjdCB9IGZyb20gJy4vT3BlbkFQSU1lZGlhT2JqZWN0JztcblxuZXhwb3J0IGNvbnN0IE9wZW5BUElSZXF1ZXN0Qm9keSA9IHtcbiAgdmFsaWRhdG9yczoge1xuICAgIGRlc2NyaXB0aW9uKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5kZXNjcmlwdGlvbiAmJiB0eXBlb2Ygbm9kZS5kZXNjcmlwdGlvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRXJycm9yRmllbGRUeXBlTWlzbWF0Y2goJ3N0cmluZy4nLCBub2RlLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAobm9kZSAmJiAhbm9kZS5jb250ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yTWlzc2luZ1JlcXVpcmVkRmllbGQoJ2NvbnRlbnQnLCBub2RlLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIHJlcXVpcmVkKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5yZXF1aXJlZCAmJiB0eXBlb2Ygbm9kZS5yZXF1aXJlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycnJvckZpZWxkVHlwZU1pc21hdGNoKCdib29sZWFuLicsIG5vZGUsIGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG4gIHByb3BlcnRpZXM6IHtcbiAgICBjb250ZW50OiBPcGVuQVBJTWVkaWFUeXBlT2JqZWN0LFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IE9wZW5BUElSZXF1ZXN0Qm9keU1hcCA9IHtcbiAgcHJvcGVydGllcyhub2RlKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhub2RlKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICBwcm9wc1trXSA9IE9wZW5BUElSZXF1ZXN0Qm9keTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0sXG59O1xuIl19