"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenAPIParameterMap = exports.OpenAPIParameter = void 0;

var _error = _interopRequireDefault(require("../error"));

var _OpenAPISchema = _interopRequireDefault(require("./OpenAPISchema"));

var _OpenAPIMediaObject = require("./OpenAPIMediaObject");

var _OpenAPIExample = require("./OpenAPIExample");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const OpenAPIParameter = {
  validators: {
    name() {
      return (node, ctx) => {
        if (!node) return null;
        if (!node.name || typeof node.name !== 'string') return (0, _error.default)('name is required and must be a string', node, ctx);
        const visitedNodes = ctx.pathStack.reduce((acc, val) => [...acc, ...val.path], []);

        if (node.in && node.in === 'path' && [...ctx.path, ...visitedNodes].filter(pathNode => typeof pathNode === 'string' && pathNode.indexOf(`{${node.name}}`) !== -1).length === 0 && (ctx.path.indexOf('components') === -1 || visitedNodes.indexOf('paths') !== -1)) {
          return (0, _error.default)('The "name" field value is not in the current parameter path.', node, ctx);
        }

        return null;
      };
    },

    in() {
      return (node, ctx) => {
        if (!node) return null;
        if (!node.in) return (0, _error.default)('in field is required for Parameter object', node, ctx);
        if (typeof node.in !== 'string') return (0, _error.default)('in field must be a string', node, ctx);
        if (!['query', 'header', 'path', 'cookie'].includes(node.in)) return (0, _error.default)("in value can be only one of: 'query', 'header', 'path', 'cookie'", node, ctx);
        return null;
      };
    },

    description() {
      return (node, ctx) => {
        if (node && node.description && typeof node.description !== 'string') return (0, _error.default)('description field must be a string', node, ctx);
        return null;
      };
    },

    required() {
      return (node, ctx) => {
        if (node && node.required && typeof node.required !== 'boolean') return (0, _error.default)('required field must be a boolean', node, ctx);

        if (node && node.in && node.in === 'path' && node.required !== true) {
          return (0, _error.default)('If the parameter location is "path", this property is REQUIRED and its value MUST be true.', node, ctx);
        }

        return null;
      };
    },

    deprecated() {
      return (node, ctx) => {
        if (node && node.deprecated && typeof node.deprecated !== 'boolean') return (0, _error.default)('deprecated field must be a boolean', node, ctx);
        return null;
      };
    },

    allowEmptyValue() {
      return (node, ctx) => {
        if (node && node.allowEmptyValue && typeof node.allowEmptyValue !== 'boolean') return (0, _error.default)('allowEmptyValue field must be a boolean', node, ctx);
        return null;
      };
    },

    style() {
      return (node, ctx) => {
        if (node && node.style && typeof node.style !== 'string') {
          return (0, _error.default)('The style field must be a string for Parameter object', node, ctx);
        }

        return null;
      };
    },

    explode() {
      return (node, ctx) => {
        if (node && node.explode && typeof node.explode !== 'boolean') return (0, _error.default)('explode field must be a boolean', node, ctx);
        return null;
      };
    },

    allowReserved() {
      return (node, ctx) => {
        if (node && node.allowReserved && typeof node.allowReserved !== 'boolean') return (0, _error.default)('allowReserved field must be a boolean', node, ctx);
        return null;
      };
    },

    example() {
      return (node, ctx) => {
        if (node.example && node.examples) return (0, _error.default)('The example field is mutually exclusive of the examples field.', node, ctx);
        return null;
      };
    },

    examples() {
      return (node, ctx) => {
        if (node.example && node.examples) return (0, _error.default)('The examples field is mutually exclusive of the example field.', node, ctx);
        return null;
      };
    },

    schema() {
      return (node, ctx) => {
        if (node.schema && node.content) {
          return (0, _error.default)('A parameter MUST contain either a schema property, or a content property, but not both.', node, ctx);
        }

        return null;
      };
    },

    content() {
      return (node, ctx) => {
        if (node.schema && node.content) {
          return (0, _error.default)('A parameter MUST contain either a schema property, or a content property, but not both.', node, ctx);
        }

        return null;
      };
    }

  },
  properties: {
    schema: _OpenAPISchema.default,
    content: _OpenAPIMediaObject.OpenAPIMediaTypeObject,
    examples: _OpenAPIExample.OpenAPIExampleMap
  }
};
exports.OpenAPIParameter = OpenAPIParameter;
const OpenAPIParameterMap = {
  properties(node) {
    const props = {};
    Object.keys(node).forEach(k => {
      props[k] = OpenAPIParameter;
    });
    return props;
  }

};
exports.OpenAPIParameterMap = OpenAPIParameterMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,