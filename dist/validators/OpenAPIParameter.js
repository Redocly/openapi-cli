"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenAPIParameterMap = exports.OpenAPIParameter = void 0;

var _error = _interopRequireDefault(require("../error"));

var _OpenAPISchema = _interopRequireDefault(require("./OpenAPISchema"));

var _OpenAPIMediaObject = require("./OpenAPIMediaObject");

var _OpenAPIExample = require("./OpenAPIExample");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const OpenAPIParameter = {
  validators: {
    name() {
      return (node, ctx) => {
        if (!node) return null;
        if (!node.name || typeof node.name !== 'string') return (0, _error.default)('name is required and must be a string', node, ctx);

        if (node.in && node.in === 'path' && [...ctx.path, ...ctx.pathStack.flat()].filter(pathNode => typeof pathNode === 'string' && pathNode.indexOf(`{${node.name}}`) !== -1).length === 0 && !(ctx.path.indexOf('components') === -1 || ctx.pathStack.flat().indexOf('paths') !== 0)) {
          console.log(ctx.path);
          return (0, _error.default)('The "name" field value is not in the current parameter path.', node, ctx);
        }

        return null;
      };
    },

    in() {
      return (node, ctx) => {
        if (!node) return null;
        if (!node.in) return (0, _error.default)('in field is required for Parameter object', node, ctx);
        if (typeof node.in !== 'string') return (0, _error.default)('in field must be a string', node, ctx);
        if (!['query', 'header', 'path', 'cookie'].includes(node.in)) return (0, _error.default)("in value can be only one of: 'query', 'header', 'path', 'cookie'", node, ctx);
        return null;
      };
    },

    description() {
      return (node, ctx) => {
        if (node && node.description && typeof node.description !== 'string') return (0, _error.default)('description field must be a string', node, ctx);
        return null;
      };
    },

    required() {
      return (node, ctx) => {
        if (node && node.required && typeof node.required !== 'boolean') return (0, _error.default)('required field must be a boolean', node, ctx);

        if (node && node.in && node.in === 'path' && node.required !== true) {
          return (0, _error.default)('If the parameter location is "path", this property is REQUIRED and its value MUST be true.', node, ctx);
        }

        return null;
      };
    },

    deprecated() {
      return (node, ctx) => {
        if (node && node.deprecated && typeof node.deprecated !== 'boolean') return (0, _error.default)('deprecated field must be a boolean', node, ctx);
        return null;
      };
    },

    allowEmptyValue() {
      return (node, ctx) => {
        if (node && node.allowEmptyValue && typeof node.allowEmptyValue !== 'boolean') return (0, _error.default)('allowEmptyValue field must be a boolean', node, ctx);
        return null;
      };
    },

    style() {
      return (node, ctx) => {
        if (node && node.style && typeof node.style !== 'string') {
          return (0, _error.default)('The style field must be a string for Parameter object', node, ctx);
        }

        return null;
      };
    },

    explode() {
      return (node, ctx) => {
        if (node && node.explode && typeof node.explode !== 'boolean') return (0, _error.default)('explode field must be a boolean', node, ctx);
        return null;
      };
    },

    allowReserved() {
      return (node, ctx) => {
        if (node && node.allowReserved && typeof node.allowReserved !== 'boolean') return (0, _error.default)('allowReserved field must be a boolean', node, ctx);
        return null;
      };
    },

    example() {
      return (node, ctx) => {
        if (node.example && node.examples) return (0, _error.default)('The example field is mutually exclusive of the examples field.', node, ctx);
        return null;
      };
    },

    examples() {
      return (node, ctx) => {
        if (node.example && node.examples) return (0, _error.default)('The examples field is mutually exclusive of the example field.', node, ctx);
        return null;
      };
    },

    schema() {
      return (node, ctx) => {
        if (node.schema && node.content) {
          return (0, _error.default)('A parameter MUST contain either a schema property, or a content property, but not both.', node, ctx);
        }

        return null;
      };
    },

    content() {
      return (node, ctx) => {
        if (node.schema && node.content) {
          return (0, _error.default)('A parameter MUST contain either a schema property, or a content property, but not both.', node, ctx);
        }

        return null;
      };
    }

  },
  properties: {
    schema: _OpenAPISchema.default,
    content: _OpenAPIMediaObject.OpenAPIMediaTypeObject,
    examples: _OpenAPIExample.OpenAPIExampleMap
  }
};
exports.OpenAPIParameter = OpenAPIParameter;
const OpenAPIParameterMap = {
  properties(node) {
    const props = {};
    Object.keys(node).forEach(k => {
      props[k] = OpenAPIParameter;
    });
    return props;
  }

};
exports.OpenAPIParameterMap = OpenAPIParameterMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92YWxpZGF0b3JzL09wZW5BUElQYXJhbWV0ZXIuanMiXSwibmFtZXMiOlsiT3BlbkFQSVBhcmFtZXRlciIsInZhbGlkYXRvcnMiLCJuYW1lIiwibm9kZSIsImN0eCIsImluIiwicGF0aCIsInBhdGhTdGFjayIsImZsYXQiLCJmaWx0ZXIiLCJwYXRoTm9kZSIsImluZGV4T2YiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwiaW5jbHVkZXMiLCJkZXNjcmlwdGlvbiIsInJlcXVpcmVkIiwiZGVwcmVjYXRlZCIsImFsbG93RW1wdHlWYWx1ZSIsInN0eWxlIiwiZXhwbG9kZSIsImFsbG93UmVzZXJ2ZWQiLCJleGFtcGxlIiwiZXhhbXBsZXMiLCJzY2hlbWEiLCJjb250ZW50IiwicHJvcGVydGllcyIsIk9wZW5BUElTY2hlbWFPYmplY3QiLCJPcGVuQVBJTWVkaWFUeXBlT2JqZWN0IiwiT3BlbkFQSUV4YW1wbGVNYXAiLCJPcGVuQVBJUGFyYW1ldGVyTWFwIiwicHJvcHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQUVPLE1BQU1BLGdCQUFnQixHQUFHO0FBQzlCQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsSUFBSSxHQUFHO0FBQ0wsYUFBTyxDQUFDQyxJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNwQixZQUFJLENBQUNELElBQUwsRUFBVyxPQUFPLElBQVA7QUFDWCxZQUFJLENBQUNBLElBQUksQ0FBQ0QsSUFBTixJQUFjLE9BQU9DLElBQUksQ0FBQ0QsSUFBWixLQUFxQixRQUF2QyxFQUFpRCxPQUFPLG9CQUFZLHVDQUFaLEVBQXFEQyxJQUFyRCxFQUEyREMsR0FBM0QsQ0FBUDs7QUFDakQsWUFBSUQsSUFBSSxDQUFDRSxFQUFMLElBQVdGLElBQUksQ0FBQ0UsRUFBTCxLQUFZLE1BQXZCLElBQ0MsQ0FBQyxHQUFHRCxHQUFHLENBQUNFLElBQVIsRUFBYyxHQUFHRixHQUFHLENBQUNHLFNBQUosQ0FBY0MsSUFBZCxFQUFqQixFQUNBQyxNQURBLENBQ1FDLFFBQUQsSUFBYyxPQUFPQSxRQUFQLEtBQW9CLFFBQXBCLElBQWdDQSxRQUFRLENBQUNDLE9BQVQsQ0FBa0IsSUFBR1IsSUFBSSxDQUFDRCxJQUFLLEdBQS9CLE1BQXVDLENBQUMsQ0FEN0YsRUFFQVUsTUFGQSxLQUVXLENBSFosSUFJRyxFQUFFUixHQUFHLENBQUNFLElBQUosQ0FBU0ssT0FBVCxDQUFpQixZQUFqQixNQUFtQyxDQUFDLENBQXBDLElBQXlDUCxHQUFHLENBQUNHLFNBQUosQ0FBY0MsSUFBZCxHQUFxQkcsT0FBckIsQ0FBNkIsT0FBN0IsTUFBMEMsQ0FBckYsQ0FKUCxFQUlnRztBQUM5RkUsVUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlWLEdBQUcsQ0FBQ0UsSUFBaEI7QUFDQSxpQkFBTyxvQkFBWSw4REFBWixFQUE0RUgsSUFBNUUsRUFBa0ZDLEdBQWxGLENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRCxPQVpEO0FBYUQsS0FmUzs7QUFnQlZDLElBQUFBLEVBQUUsR0FBRztBQUNILGFBQU8sQ0FBQ0YsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSSxDQUFDRCxJQUFMLEVBQVcsT0FBTyxJQUFQO0FBQ1gsWUFBSSxDQUFDQSxJQUFJLENBQUNFLEVBQVYsRUFBYyxPQUFPLG9CQUFZLDJDQUFaLEVBQXlERixJQUF6RCxFQUErREMsR0FBL0QsQ0FBUDtBQUNkLFlBQUksT0FBT0QsSUFBSSxDQUFDRSxFQUFaLEtBQW1CLFFBQXZCLEVBQWlDLE9BQU8sb0JBQVksMkJBQVosRUFBeUNGLElBQXpDLEVBQStDQyxHQUEvQyxDQUFQO0FBQ2pDLFlBQUksQ0FBQyxDQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLE1BQXBCLEVBQTRCLFFBQTVCLEVBQXNDVyxRQUF0QyxDQUErQ1osSUFBSSxDQUFDRSxFQUFwRCxDQUFMLEVBQThELE9BQU8sb0JBQVksa0VBQVosRUFBZ0ZGLElBQWhGLEVBQXNGQyxHQUF0RixDQUFQO0FBQzlELGVBQU8sSUFBUDtBQUNELE9BTkQ7QUFPRCxLQXhCUzs7QUF5QlZZLElBQUFBLFdBQVcsR0FBRztBQUNaLGFBQU8sQ0FBQ2IsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNhLFdBQWIsSUFBNEIsT0FBT2IsSUFBSSxDQUFDYSxXQUFaLEtBQTRCLFFBQTVELEVBQXNFLE9BQU8sb0JBQVksb0NBQVosRUFBa0RiLElBQWxELEVBQXdEQyxHQUF4RCxDQUFQO0FBQ3RFLGVBQU8sSUFBUDtBQUNELE9BSEQ7QUFJRCxLQTlCUzs7QUErQlZhLElBQUFBLFFBQVEsR0FBRztBQUNULGFBQU8sQ0FBQ2QsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNjLFFBQWIsSUFBeUIsT0FBT2QsSUFBSSxDQUFDYyxRQUFaLEtBQXlCLFNBQXRELEVBQWlFLE9BQU8sb0JBQVksa0NBQVosRUFBZ0RkLElBQWhELEVBQXNEQyxHQUF0RCxDQUFQOztBQUNqRSxZQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ0UsRUFBYixJQUFtQkYsSUFBSSxDQUFDRSxFQUFMLEtBQVksTUFBL0IsSUFBeUNGLElBQUksQ0FBQ2MsUUFBTCxLQUFrQixJQUEvRCxFQUFxRTtBQUNuRSxpQkFBTyxvQkFBWSw0RkFBWixFQUEwR2QsSUFBMUcsRUFBZ0hDLEdBQWhILENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRCxPQU5EO0FBT0QsS0F2Q1M7O0FBd0NWYyxJQUFBQSxVQUFVLEdBQUc7QUFDWCxhQUFPLENBQUNmLElBQUQsRUFBT0MsR0FBUCxLQUFlO0FBQ3BCLFlBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDZSxVQUFiLElBQTJCLE9BQU9mLElBQUksQ0FBQ2UsVUFBWixLQUEyQixTQUExRCxFQUFxRSxPQUFPLG9CQUFZLG9DQUFaLEVBQWtEZixJQUFsRCxFQUF3REMsR0FBeEQsQ0FBUDtBQUNyRSxlQUFPLElBQVA7QUFDRCxPQUhEO0FBSUQsS0E3Q1M7O0FBOENWZSxJQUFBQSxlQUFlLEdBQUc7QUFDaEIsYUFBTyxDQUFDaEIsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNnQixlQUFiLElBQWdDLE9BQU9oQixJQUFJLENBQUNnQixlQUFaLEtBQWdDLFNBQXBFLEVBQStFLE9BQU8sb0JBQVkseUNBQVosRUFBdURoQixJQUF2RCxFQUE2REMsR0FBN0QsQ0FBUDtBQUMvRSxlQUFPLElBQVA7QUFDRCxPQUhEO0FBSUQsS0FuRFM7O0FBb0RWZ0IsSUFBQUEsS0FBSyxHQUFHO0FBQ04sYUFBTyxDQUFDakIsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNpQixLQUFiLElBQXNCLE9BQU9qQixJQUFJLENBQUNpQixLQUFaLEtBQXNCLFFBQWhELEVBQTBEO0FBQ3hELGlCQUFPLG9CQUFZLHVEQUFaLEVBQXFFakIsSUFBckUsRUFBMkVDLEdBQTNFLENBQVA7QUFDRDs7QUFDRCxlQUFPLElBQVA7QUFDRCxPQUxEO0FBTUQsS0EzRFM7O0FBNERWaUIsSUFBQUEsT0FBTyxHQUFHO0FBQ1IsYUFBTyxDQUFDbEIsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNrQixPQUFiLElBQXdCLE9BQU9sQixJQUFJLENBQUNrQixPQUFaLEtBQXdCLFNBQXBELEVBQStELE9BQU8sb0JBQVksaUNBQVosRUFBK0NsQixJQUEvQyxFQUFxREMsR0FBckQsQ0FBUDtBQUMvRCxlQUFPLElBQVA7QUFDRCxPQUhEO0FBSUQsS0FqRVM7O0FBa0VWa0IsSUFBQUEsYUFBYSxHQUFHO0FBQ2QsYUFBTyxDQUFDbkIsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNtQixhQUFiLElBQThCLE9BQU9uQixJQUFJLENBQUNtQixhQUFaLEtBQThCLFNBQWhFLEVBQTJFLE9BQU8sb0JBQVksdUNBQVosRUFBcURuQixJQUFyRCxFQUEyREMsR0FBM0QsQ0FBUDtBQUMzRSxlQUFPLElBQVA7QUFDRCxPQUhEO0FBSUQsS0F2RVM7O0FBd0VWbUIsSUFBQUEsT0FBTyxHQUFHO0FBQ1IsYUFBTyxDQUFDcEIsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxDQUFDb0IsT0FBTCxJQUFnQnBCLElBQUksQ0FBQ3FCLFFBQXpCLEVBQW1DLE9BQU8sb0JBQVksZ0VBQVosRUFBOEVyQixJQUE5RSxFQUFvRkMsR0FBcEYsQ0FBUDtBQUNuQyxlQUFPLElBQVA7QUFDRCxPQUhEO0FBSUQsS0E3RVM7O0FBOEVWb0IsSUFBQUEsUUFBUSxHQUFHO0FBQ1QsYUFBTyxDQUFDckIsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxDQUFDb0IsT0FBTCxJQUFnQnBCLElBQUksQ0FBQ3FCLFFBQXpCLEVBQW1DLE9BQU8sb0JBQVksZ0VBQVosRUFBOEVyQixJQUE5RSxFQUFvRkMsR0FBcEYsQ0FBUDtBQUNuQyxlQUFPLElBQVA7QUFDRCxPQUhEO0FBSUQsS0FuRlM7O0FBb0ZWcUIsSUFBQUEsTUFBTSxHQUFHO0FBQ1AsYUFBTyxDQUFDdEIsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDcEIsWUFBSUQsSUFBSSxDQUFDc0IsTUFBTCxJQUFldEIsSUFBSSxDQUFDdUIsT0FBeEIsRUFBaUM7QUFDL0IsaUJBQU8sb0JBQVkseUZBQVosRUFBdUd2QixJQUF2RyxFQUE2R0MsR0FBN0csQ0FBUDtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNELE9BTEQ7QUFNRCxLQTNGUzs7QUE0RlZzQixJQUFBQSxPQUFPLEdBQUc7QUFDUixhQUFPLENBQUN2QixJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNwQixZQUFJRCxJQUFJLENBQUNzQixNQUFMLElBQWV0QixJQUFJLENBQUN1QixPQUF4QixFQUFpQztBQUMvQixpQkFBTyxvQkFBWSx5RkFBWixFQUF1R3ZCLElBQXZHLEVBQTZHQyxHQUE3RyxDQUFQO0FBQ0Q7O0FBQ0QsZUFBTyxJQUFQO0FBQ0QsT0FMRDtBQU1EOztBQW5HUyxHQURrQjtBQXNHOUJ1QixFQUFBQSxVQUFVLEVBQUU7QUFDVkYsSUFBQUEsTUFBTSxFQUFFRyxzQkFERTtBQUVWRixJQUFBQSxPQUFPLEVBQUVHLDBDQUZDO0FBR1ZMLElBQUFBLFFBQVEsRUFBRU07QUFIQTtBQXRHa0IsQ0FBekI7O0FBNkdBLE1BQU1DLG1CQUFtQixHQUFHO0FBQ2pDSixFQUFBQSxVQUFVLENBQUN4QixJQUFELEVBQU87QUFDZixVQUFNNkIsS0FBSyxHQUFHLEVBQWQ7QUFDQUMsSUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVkvQixJQUFaLEVBQWtCZ0MsT0FBbEIsQ0FBMkJDLENBQUQsSUFBTztBQUMvQkosTUFBQUEsS0FBSyxDQUFDSSxDQUFELENBQUwsR0FBV3BDLGdCQUFYO0FBQ0QsS0FGRDtBQUdBLFdBQU9nQyxLQUFQO0FBQ0Q7O0FBUGdDLENBQTVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUVycm9yIGZyb20gJy4uL2Vycm9yJztcblxuaW1wb3J0IE9wZW5BUElTY2hlbWFPYmplY3QgZnJvbSAnLi9PcGVuQVBJU2NoZW1hJztcbmltcG9ydCB7IE9wZW5BUElNZWRpYVR5cGVPYmplY3QgfSBmcm9tICcuL09wZW5BUElNZWRpYU9iamVjdCc7XG5pbXBvcnQgeyBPcGVuQVBJRXhhbXBsZU1hcCB9IGZyb20gJy4vT3BlbkFQSUV4YW1wbGUnO1xuXG5leHBvcnQgY29uc3QgT3BlbkFQSVBhcmFtZXRlciA9IHtcbiAgdmFsaWRhdG9yczoge1xuICAgIG5hbWUoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAoIW5vZGUpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIW5vZGUubmFtZSB8fCB0eXBlb2Ygbm9kZS5uYW1lICE9PSAnc3RyaW5nJykgcmV0dXJuIGNyZWF0ZUVycm9yKCduYW1lIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGEgc3RyaW5nJywgbm9kZSwgY3R4KTtcbiAgICAgICAgaWYgKG5vZGUuaW4gJiYgbm9kZS5pbiA9PT0gJ3BhdGgnXG4gICAgICAgICAgJiYgWy4uLmN0eC5wYXRoLCAuLi5jdHgucGF0aFN0YWNrLmZsYXQoKV1cbiAgICAgICAgICAgIC5maWx0ZXIoKHBhdGhOb2RlKSA9PiB0eXBlb2YgcGF0aE5vZGUgPT09ICdzdHJpbmcnICYmIHBhdGhOb2RlLmluZGV4T2YoYHske25vZGUubmFtZX19YCkgIT09IC0xKVxuICAgICAgICAgICAgLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgJiYgIShjdHgucGF0aC5pbmRleE9mKCdjb21wb25lbnRzJykgPT09IC0xIHx8IGN0eC5wYXRoU3RhY2suZmxhdCgpLmluZGV4T2YoJ3BhdGhzJykgIT09IDApKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coY3R4LnBhdGgpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFcnJvcignVGhlIFwibmFtZVwiIGZpZWxkIHZhbHVlIGlzIG5vdCBpbiB0aGUgY3VycmVudCBwYXJhbWV0ZXIgcGF0aC4nLCBub2RlLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGluKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKCFub2RlKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCFub2RlLmluKSByZXR1cm4gY3JlYXRlRXJyb3IoJ2luIGZpZWxkIGlzIHJlcXVpcmVkIGZvciBQYXJhbWV0ZXIgb2JqZWN0Jywgbm9kZSwgY3R4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLmluICE9PSAnc3RyaW5nJykgcmV0dXJuIGNyZWF0ZUVycm9yKCdpbiBmaWVsZCBtdXN0IGJlIGEgc3RyaW5nJywgbm9kZSwgY3R4KTtcbiAgICAgICAgaWYgKCFbJ3F1ZXJ5JywgJ2hlYWRlcicsICdwYXRoJywgJ2Nvb2tpZSddLmluY2x1ZGVzKG5vZGUuaW4pKSByZXR1cm4gY3JlYXRlRXJyb3IoXCJpbiB2YWx1ZSBjYW4gYmUgb25seSBvbmUgb2Y6ICdxdWVyeScsICdoZWFkZXInLCAncGF0aCcsICdjb29raWUnXCIsIG5vZGUsIGN0eCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGRlc2NyaXB0aW9uKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5kZXNjcmlwdGlvbiAmJiB0eXBlb2Ygbm9kZS5kZXNjcmlwdGlvbiAhPT0gJ3N0cmluZycpIHJldHVybiBjcmVhdGVFcnJvcignZGVzY3JpcHRpb24gZmllbGQgbXVzdCBiZSBhIHN0cmluZycsIG5vZGUsIGN0eCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIHJlcXVpcmVkKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5yZXF1aXJlZCAmJiB0eXBlb2Ygbm9kZS5yZXF1aXJlZCAhPT0gJ2Jvb2xlYW4nKSByZXR1cm4gY3JlYXRlRXJyb3IoJ3JlcXVpcmVkIGZpZWxkIG11c3QgYmUgYSBib29sZWFuJywgbm9kZSwgY3R4KTtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5pbiAmJiBub2RlLmluID09PSAncGF0aCcgJiYgbm9kZS5yZXF1aXJlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFcnJvcignSWYgdGhlIHBhcmFtZXRlciBsb2NhdGlvbiBpcyBcInBhdGhcIiwgdGhpcyBwcm9wZXJ0eSBpcyBSRVFVSVJFRCBhbmQgaXRzIHZhbHVlIE1VU1QgYmUgdHJ1ZS4nLCBub2RlLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGRlcHJlY2F0ZWQoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmRlcHJlY2F0ZWQgJiYgdHlwZW9mIG5vZGUuZGVwcmVjYXRlZCAhPT0gJ2Jvb2xlYW4nKSByZXR1cm4gY3JlYXRlRXJyb3IoJ2RlcHJlY2F0ZWQgZmllbGQgbXVzdCBiZSBhIGJvb2xlYW4nLCBub2RlLCBjdHgpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBhbGxvd0VtcHR5VmFsdWUoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmFsbG93RW1wdHlWYWx1ZSAmJiB0eXBlb2Ygbm9kZS5hbGxvd0VtcHR5VmFsdWUgIT09ICdib29sZWFuJykgcmV0dXJuIGNyZWF0ZUVycm9yKCdhbGxvd0VtcHR5VmFsdWUgZmllbGQgbXVzdCBiZSBhIGJvb2xlYW4nLCBub2RlLCBjdHgpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBzdHlsZSgpIHtcbiAgICAgIHJldHVybiAobm9kZSwgY3R4KSA9PiB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuc3R5bGUgJiYgdHlwZW9mIG5vZGUuc3R5bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yKCdUaGUgc3R5bGUgZmllbGQgbXVzdCBiZSBhIHN0cmluZyBmb3IgUGFyYW1ldGVyIG9iamVjdCcsIG5vZGUsIGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgZXhwbG9kZSgpIHtcbiAgICAgIHJldHVybiAobm9kZSwgY3R4KSA9PiB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZXhwbG9kZSAmJiB0eXBlb2Ygbm9kZS5leHBsb2RlICE9PSAnYm9vbGVhbicpIHJldHVybiBjcmVhdGVFcnJvcignZXhwbG9kZSBmaWVsZCBtdXN0IGJlIGEgYm9vbGVhbicsIG5vZGUsIGN0eCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGFsbG93UmVzZXJ2ZWQoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmFsbG93UmVzZXJ2ZWQgJiYgdHlwZW9mIG5vZGUuYWxsb3dSZXNlcnZlZCAhPT0gJ2Jvb2xlYW4nKSByZXR1cm4gY3JlYXRlRXJyb3IoJ2FsbG93UmVzZXJ2ZWQgZmllbGQgbXVzdCBiZSBhIGJvb2xlYW4nLCBub2RlLCBjdHgpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBleGFtcGxlKCkge1xuICAgICAgcmV0dXJuIChub2RlLCBjdHgpID0+IHtcbiAgICAgICAgaWYgKG5vZGUuZXhhbXBsZSAmJiBub2RlLmV4YW1wbGVzKSByZXR1cm4gY3JlYXRlRXJyb3IoJ1RoZSBleGFtcGxlIGZpZWxkIGlzIG11dHVhbGx5IGV4Y2x1c2l2ZSBvZiB0aGUgZXhhbXBsZXMgZmllbGQuJywgbm9kZSwgY3R4KTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgZXhhbXBsZXMoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAobm9kZS5leGFtcGxlICYmIG5vZGUuZXhhbXBsZXMpIHJldHVybiBjcmVhdGVFcnJvcignVGhlIGV4YW1wbGVzIGZpZWxkIGlzIG11dHVhbGx5IGV4Y2x1c2l2ZSBvZiB0aGUgZXhhbXBsZSBmaWVsZC4nLCBub2RlLCBjdHgpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBzY2hlbWEoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAobm9kZS5zY2hlbWEgJiYgbm9kZS5jb250ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yKCdBIHBhcmFtZXRlciBNVVNUIGNvbnRhaW4gZWl0aGVyIGEgc2NoZW1hIHByb3BlcnR5LCBvciBhIGNvbnRlbnQgcHJvcGVydHksIGJ1dCBub3QgYm90aC4nLCBub2RlLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gKG5vZGUsIGN0eCkgPT4ge1xuICAgICAgICBpZiAobm9kZS5zY2hlbWEgJiYgbm9kZS5jb250ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yKCdBIHBhcmFtZXRlciBNVVNUIGNvbnRhaW4gZWl0aGVyIGEgc2NoZW1hIHByb3BlcnR5LCBvciBhIGNvbnRlbnQgcHJvcGVydHksIGJ1dCBub3QgYm90aC4nLCBub2RlLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICB9LFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgc2NoZW1hOiBPcGVuQVBJU2NoZW1hT2JqZWN0LFxuICAgIGNvbnRlbnQ6IE9wZW5BUElNZWRpYVR5cGVPYmplY3QsXG4gICAgZXhhbXBsZXM6IE9wZW5BUElFeGFtcGxlTWFwLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IE9wZW5BUElQYXJhbWV0ZXJNYXAgPSB7XG4gIHByb3BlcnRpZXMobm9kZSkge1xuICAgIGNvbnN0IHByb3BzID0ge307XG4gICAgT2JqZWN0LmtleXMobm9kZSkuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgcHJvcHNba10gPSBPcGVuQVBJUGFyYW1ldGVyO1xuICAgIH0pO1xuICAgIHJldHVybiBwcm9wcztcbiAgfSxcbn07XG4iXX0=