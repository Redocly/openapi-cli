"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _error = _interopRequireDefault(require("./error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * Here we go over each of the steps in the link and try to retreive the value
 * for it. If failed (e.g. because of undefined value) -- return null, to indicate that such
 * reference does not exist.
 *
 * @param {string} link A path in the yaml document which is to be resolved
 * @param {*} ctx JSON Object with the document field which represents the YAML structure
 */
const resolve = (link, ctx) => {
  const linkSplitted = link.split('#/');
  const [filePath, docPath] = linkSplitted;
  let fullFileName;
  let target;
  let fData;

  if (filePath) {
    const path = ctx.filePath.substring(0, Math.max(ctx.filePath.lastIndexOf('/'), ctx.filePath.lastIndexOf('\\')));
    fullFileName = path ? `${path}/${filePath}` : filePath;
    fData = _fs.default.readFileSync(fullFileName, 'utf-8');
    target = _jsYaml.default.safeLoad(fData);
  } else {
    target = ctx.document;
  }

  if (docPath) {
    const steps = docPath.split('/').filter(el => el !== '');
    Object.keys(steps).forEach(step => {
      target = target && steps[step] && target[steps[step]] ? target[steps[step]] : null;
    });
  }

  return {
    node: target,
    updatedSource: filePath ? fData : null,
    docPath: docPath ? docPath.split('/') : [],
    filePath: fullFileName || null
  };
};

const resolveNode = (node, ctx) => {
  if (!node || typeof node !== 'object') return {
    node,
    nextPath: null
  };
  let nextPath;
  let resolved = {
    node
  };
  Object.keys(node).forEach(p => {
    if (p === '$ref') {
      resolved = resolve(node[p], ctx);
      nextPath = resolved.docPath;

      if (!resolved.node) {
        ctx.path.push('$ref');
        ctx.result.push((0, _error.default)('Reference does not exist.', node, ctx));
        ctx.path.pop();
        resolved.node = node;
        nextPath = null;
        resolved.updatedSource = null;
        resolved.filePath = null;
      }
    }
  });
  return {
    node: resolved.node,
    nextPath,
    updatedSource: resolved.updatedSource,
    filePath: resolved.filePath
  };
};

var _default = resolveNode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXNvbHZlci5qcyJdLCJuYW1lcyI6WyJyZXNvbHZlIiwibGluayIsImN0eCIsImxpbmtTcGxpdHRlZCIsInNwbGl0IiwiZmlsZVBhdGgiLCJkb2NQYXRoIiwiZnVsbEZpbGVOYW1lIiwidGFyZ2V0IiwiZkRhdGEiLCJwYXRoIiwic3Vic3RyaW5nIiwiTWF0aCIsIm1heCIsImxhc3RJbmRleE9mIiwiZnMiLCJyZWFkRmlsZVN5bmMiLCJ5YW1sIiwic2FmZUxvYWQiLCJkb2N1bWVudCIsInN0ZXBzIiwiZmlsdGVyIiwiZWwiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInN0ZXAiLCJub2RlIiwidXBkYXRlZFNvdXJjZSIsInJlc29sdmVOb2RlIiwibmV4dFBhdGgiLCJyZXNvbHZlZCIsInAiLCJwdXNoIiwicmVzdWx0IiwicG9wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTs7Ozs7Ozs7O0FBU0EsTUFBTUEsT0FBTyxHQUFHLENBQUNDLElBQUQsRUFBT0MsR0FBUCxLQUFlO0FBQzdCLFFBQU1DLFlBQVksR0FBR0YsSUFBSSxDQUFDRyxLQUFMLENBQVcsSUFBWCxDQUFyQjtBQUNBLFFBQU0sQ0FBQ0MsUUFBRCxFQUFXQyxPQUFYLElBQXNCSCxZQUE1QjtBQUNBLE1BQUlJLFlBQUo7QUFFQSxNQUFJQyxNQUFKO0FBQ0EsTUFBSUMsS0FBSjs7QUFDQSxNQUFJSixRQUFKLEVBQWM7QUFDWixVQUFNSyxJQUFJLEdBQUdSLEdBQUcsQ0FBQ0csUUFBSixDQUFhTSxTQUFiLENBQXVCLENBQXZCLEVBQTBCQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1gsR0FBRyxDQUFDRyxRQUFKLENBQWFTLFdBQWIsQ0FBeUIsR0FBekIsQ0FBVCxFQUF3Q1osR0FBRyxDQUFDRyxRQUFKLENBQWFTLFdBQWIsQ0FBeUIsSUFBekIsQ0FBeEMsQ0FBMUIsQ0FBYjtBQUNBUCxJQUFBQSxZQUFZLEdBQUdHLElBQUksR0FBSSxHQUFFQSxJQUFL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O2VBNkJld0IsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeWFtbCBmcm9tICdqcy15YW1sJztcbmltcG9ydCBjcmVhdGVFcnJvciBmcm9tICcuL2Vycm9yJztcblxuLyoqXG4gKlxuICogSGVyZSB3ZSBnbyBvdmVyIGVhY2ggb2YgdGhlIHN0ZXBzIGluIHRoZSBsaW5rIGFuZCB0cnkgdG8gcmV0cmVpdmUgdGhlIHZhbHVlXG4gKiBmb3IgaXQuIElmIGZhaWxlZCAoZS5nLiBiZWNhdXNlIG9mIHVuZGVmaW5lZCB2YWx1ZSkgLS0gcmV0dXJuIG51bGwsIHRvIGluZGljYXRlIHRoYXQgc3VjaFxuICogcmVmZXJlbmNlIGRvZXMgbm90IGV4aXN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIEEgcGF0aCBpbiB0aGUgeWFtbCBkb2N1bWVudCB3aGljaCBpcyB0byBiZSByZXNvbHZlZFxuICogQHBhcmFtIHsqfSBjdHggSlNPTiBPYmplY3Qgd2l0aCB0aGUgZG9jdW1lbnQgZmllbGQgd2hpY2ggcmVwcmVzZW50cyB0aGUgWUFNTCBzdHJ1Y3R1cmVcbiAqL1xuY29uc3QgcmVzb2x2ZSA9IChsaW5rLCBjdHgpID0+IHtcbiAgY29uc3QgbGlua1NwbGl0dGVkID0gbGluay5zcGxpdCgnIy8nKTtcbiAgY29uc3QgW2ZpbGVQYXRoLCBkb2NQYXRoXSA9IGxpbmtTcGxpdHRlZDtcbiAgbGV0IGZ1bGxGaWxlTmFtZTtcblxuICBsZXQgdGFyZ2V0O1xuICBsZXQgZkRhdGE7XG4gIGlmIChmaWxlUGF0aCkge1xuICAgIGNvbnN0IHBhdGggPSBjdHguZmlsZVBhdGguc3Vic3RyaW5nKDAsIE1hdGgubWF4KGN0eC5maWxlUGF0aC5sYXN0SW5kZXhPZignLycpLCBjdHguZmlsZVBhdGgubGFzdEluZGV4T2YoJ1xcXFwnKSkpO1xuICAgIGZ1bGxGaWxlTmFtZSA9IHBhdGggPyBgJHtwYXRofS8ke2ZpbGVQYXRofWAgOiBmaWxlUGF0aDtcbiAgICBmRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmdWxsRmlsZU5hbWUsICd1dGYtOCcpO1xuICAgIHRhcmdldCA9IHlhbWwuc2FmZUxvYWQoZkRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IGN0eC5kb2N1bWVudDtcbiAgfVxuXG4gIGlmIChkb2NQYXRoKSB7XG4gICAgY29uc3Qgc3RlcHMgPSBkb2NQYXRoLnNwbGl0KCcvJykuZmlsdGVyKChlbCkgPT4gZWwgIT09ICcnKTtcbiAgICBPYmplY3Qua2V5cyhzdGVwcykuZm9yRWFjaCgoc3RlcCkgPT4ge1xuICAgICAgdGFyZ2V0ID0gdGFyZ2V0ICYmIHN0ZXBzW3N0ZXBdICYmIHRhcmdldFtzdGVwc1tzdGVwXV0gPyB0YXJnZXRbc3RlcHNbc3RlcF1dIDogbnVsbDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbm9kZTogdGFyZ2V0LFxuICAgIHVwZGF0ZWRTb3VyY2U6IGZpbGVQYXRoID8gZkRhdGEgOiBudWxsLFxuICAgIGRvY1BhdGg6IGRvY1BhdGggPyBkb2NQYXRoLnNwbGl0KCcvJykgOiBbXSxcbiAgICBmaWxlUGF0aDogZnVsbEZpbGVOYW1lIHx8IG51bGwsXG4gIH07XG59O1xuXG5jb25zdCByZXNvbHZlTm9kZSA9IChub2RlLCBjdHgpID0+IHtcbiAgaWYgKCFub2RlIHx8IHR5cGVvZiBub2RlICE9PSAnb2JqZWN0JykgcmV0dXJuIHsgbm9kZSwgbmV4dFBhdGg6IG51bGwgfTtcbiAgbGV0IG5leHRQYXRoO1xuICBsZXQgcmVzb2x2ZWQgPSB7XG4gICAgbm9kZSxcbiAgfTtcbiAgT2JqZWN0LmtleXMobm9kZSkuZm9yRWFjaCgocCkgPT4ge1xuICAgIGlmIChwID09PSAnJHJlZicpIHtcbiAgICAgIHJlc29sdmVkID0gcmVzb2x2ZShub2RlW3BdLCBjdHgpO1xuICAgICAgbmV4dFBhdGggPSByZXNvbHZlZC5kb2NQYXRoO1xuICAgICAgaWYgKCFyZXNvbHZlZC5ub2RlKSB7XG4gICAgICAgIGN0eC5wYXRoLnB1c2goJyRyZWYnKTtcbiAgICAgICAgY3R4LnJlc3VsdC5wdXNoKGNyZWF0ZUVycm9yKCdSZWZlcmVuY2UgZG9lcyBub3QgZXhpc3QuJywgbm9kZSwgY3R4KSk7XG4gICAgICAgIGN0eC5wYXRoLnBvcCgpO1xuICAgICAgICByZXNvbHZlZC5ub2RlID0gbm9kZTtcbiAgICAgICAgbmV4dFBhdGggPSBudWxsO1xuICAgICAgICByZXNvbHZlZC51cGRhdGVkU291cmNlID0gbnVsbDtcbiAgICAgICAgcmVzb2x2ZWQuZmlsZVBhdGggPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgbm9kZTogcmVzb2x2ZWQubm9kZSxcbiAgICBuZXh0UGF0aCxcbiAgICB1cGRhdGVkU291cmNlOiByZXNvbHZlZC51cGRhdGVkU291cmNlLFxuICAgIGZpbGVQYXRoOiByZXNvbHZlZC5maWxlUGF0aCxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVOb2RlO1xuIl19